/// <reference types="node" />
import { Connection, PublicKey } from "@solana/web3.js";
import { GatewayToken } from "../types";
import { GatewayTokenData } from "./GatewayTokenData";
import { NetworkFeature } from "./GatewayNetworkData";
/**
 * Derive the address of the gatekeeper PDA for this gatekeeper
 * @param authority The gatekeeper
 * @param network The network
 */
export declare const getGatekeeperAccountAddress: (authority: PublicKey, network: PublicKey) => PublicKey;
/**
 * Derive the address of the gateway token PDA for this owner address and optional seed.
 * @param owner The owner of the gateway token
 * @param gatekeeperNetwork The network of the gateway token
 * @param index The index of the gateway token (default 0)
 */
export declare const getGatewayTokenAddressForOwnerAndGatekeeperNetwork: (owner: PublicKey, gatekeeperNetwork: PublicKey, index?: number) => PublicKey;
export declare const GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET = 2;
export declare const GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET = 35;
export declare const dataToGatewayToken: (data: GatewayTokenData, publicKey: PublicKey) => GatewayToken;
/**
 * Stops listening to gateway state changes
 * @param connection A solana connection object
 * @param id The subscription id to deregister
 */
export declare const removeAccountChangeListener: (connection: Connection, id: number) => Promise<void>;
/**
 * Returns whether or not a gatekeeper exists from a network and authority
 * @param connection A solana connection
 * @param gatekeeperAuthority The authority of the gatekeeper
 * @param gatekeeperNetwork The network of the gatekeeper
 */
export declare const gatekeeperExists: (connection: Connection, gatekeeperAuthority: PublicKey, gatekeeperNetwork: PublicKey) => Promise<boolean>;
/**
 * Converts a number to a buffer of U8 integers, for use in the gateway token address
 * derivation as the seed value.
 * @param num
 */
export declare const numToBuffer: (num: number) => Buffer;
/**
 * Derive the address of the feature PDA
 * @param feature The feature to set.
 * @param network The network
 */
export declare const getFeatureAccountAddress: (feature: NetworkFeature, network: PublicKey) => PublicKey;
