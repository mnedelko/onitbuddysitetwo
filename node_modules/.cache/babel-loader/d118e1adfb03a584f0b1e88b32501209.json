{"ast":null,"code":"import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.splitRegexp,\n    splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,\n    _b = options.stripRegexp,\n    stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,\n    _c = options.transform,\n    transform = _c === void 0 ? lowerCase : _c,\n    _d = options.delimiter,\n    delimiter = _d === void 0 ? \" \" : _d;\n  var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n  var start = 0;\n  var end = result.length;\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") {\n    start++;\n  }\n  while (result.charAt(end - 1) === \"\\0\") {\n    end--;\n  }\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce(function (input, re) {\n    return input.replace(re, value);\n  }, input);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,YAAY;AAStC;AACA,IAAM,oBAAoB,GAAG,CAAC,oBAAoB,EAAE,sBAAsB,CAAC;AAE3E;AACA,IAAM,oBAAoB,GAAG,cAAc;AAE3C;;AAEG;AACH,OAAM,SAAU,MAAM,CAAC,KAAa,EAAE,OAAqB,EAAA;EAArB,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,CAAA,CAAqB;EAAA;EAEvD,IAAA,EAAA,GAIE,OAAO,CAAA,WAJyB;IAAlC,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,oBAAoB,GAAA,EAAA;IAClC,EAAA,GAGE,OAAO,CAAA,WAHyB;IAAlC,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,oBAAoB,GAAA,EAAA;IAClC,EAAA,GAEE,OAAO,CAAA,SAFY;IAArB,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAS,GAAA,EAAA;IACrB,EAAA,GACE,OAAO,CAAA,SADM;IAAf,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,GAAG,GAAA,EAAA;EAGjB,IAAI,MAAM,GAAG,OAAO,CAClB,OAAO,CAAC,KAAK,EAAE,WAAW,EAAE,QAAQ,CAAC,EACrC,WAAW,EACX,IAAI,CACL;EACD,IAAI,KAAK,GAAG,CAAC;EACb,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM;EAEvB;EACA,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,IAAI;IAAE,KAAK,EAAE;EAAC;EAC9C,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI;IAAE,GAAG,EAAE;EAAC;EAE9C;EACA,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;AAC5E;AAEA;;AAEG;AACH,SAAS,OAAO,CAAC,KAAa,EAAE,EAAqB,EAAE,KAAa,EAAA;EAClE,IAAI,EAAE,YAAY,MAAM,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC;EACzD,OAAO,EAAE,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,EAAE,EAAA;IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC;EAAxB,CAAwB,EAAE,KAAK,CAAC;AAClE","sourcesContent":["import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}