{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nexport function parseIdlErrors(idl) {\n  var errors = new Map();\n  if (idl.errors) {\n    idl.errors.forEach(function (e) {\n      var _a;\n      var msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n      errors.set(e.code, msg);\n    });\n  }\n  return errors;\n}\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nexport function toInstruction(idlIx) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (idlIx.args.length != args.length) {\n    throw new Error(\"Invalid argument length\");\n  }\n  var ix = {};\n  var idx = 0;\n  idlIx.args.forEach(function (ixArg) {\n    ix[ixArg.name] = args[idx];\n    idx += 1;\n  });\n  return ix;\n}\n// Throws error if any account required for the `ix` is not given.\nexport function validateAccounts(ixAccounts, accounts) {\n  ixAccounts.forEach(function (acc) {\n    // @ts-ignore\n    if (acc.accounts !== undefined) {\n      // @ts-ignore\n      validateAccounts(acc.accounts, accounts[acc.name]);\n    } else {\n      if (accounts[acc.name] === undefined) {\n        throw new Error(\"Invalid arguments: \".concat(acc.name, \" not provided.\"));\n      }\n    }\n  });\n}\n// Translates an address to a Pubkey.\nexport function translateAddress(address) {\n  if (typeof address === \"string\") {\n    var pk = new PublicKey(address);\n    return pk;\n  } else {\n    return address;\n  }\n}","map":{"version":3,"sources":["../../../src/program/common.ts"],"names":[],"mappings":"AACA,SAAS,SAAS,QAAQ,iBAAiB;AAS3C,OAAM,SAAU,cAAc,CAAC,GAAQ,EAAA;EACrC,IAAM,MAAM,GAAG,IAAI,GAAG,EAAE;EACxB,IAAI,GAAG,CAAC,MAAM,EAAE;IACd,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,EAAI;;MACvB,IAAI,GAAG,GAAA,CAAA,EAAA,GAAG,CAAC,CAAC,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,CAAC,IAAI;MACzB,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC;IACzB,CAAC,CAAC;EACH;EACD,OAAO,MAAM;AACf;AAEA;AACA,OAAM,SAAU,aAAa,CAC3B,KAAsC,EACxB;EAAA,kCAAX,IAAW;IAAX,IAAW;EAAA;EAEd,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;IACpC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;EAC3C;EACD,IAAM,EAAE,GAA2B,CAAA,CAAE;EACrC,IAAI,GAAG,GAAG,CAAC;EACX,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,KAAK,EAAI;IAC3B,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IAC1B,GAAG,IAAI,CAAC;EACV,CAAC,CAAC;EAEF,OAAO,EAAE;AACX;AAEA;AACA,OAAM,SAAU,gBAAgB,CAC9B,UAA4B,EAC5B,QAAkB,EAAA;EAElB,UAAU,CAAC,OAAO,CAAC,UAAC,GAAG,EAAI;IACzB;IACA,IAAI,GAAG,CAAC,QAAQ,KAAK,SAAS,EAAE;MAC9B;MACA,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACnD,MAAM;MACL,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;QACpC,MAAM,IAAI,KAAK,8BAAuB,GAAG,CAAC,IAAI,oBAAiB;MAChE;IACF;EACH,CAAC,CAAC;AACJ;AAEA;AACA,OAAM,SAAU,gBAAgB,CAAC,OAAgB,EAAA;EAC/C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;IAC/B,IAAM,EAAE,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC;IACjC,OAAO,EAAE;GACV,MAAM;IACL,OAAO,OAAO;EACf;AACH","sourceRoot":"","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nexport function parseIdlErrors(idl) {\n    const errors = new Map();\n    if (idl.errors) {\n        idl.errors.forEach((e) => {\n            var _a;\n            let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n            errors.set(e.code, msg);\n        });\n    }\n    return errors;\n}\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nexport function toInstruction(idlIx, ...args) {\n    if (idlIx.args.length != args.length) {\n        throw new Error(\"Invalid argument length\");\n    }\n    const ix = {};\n    let idx = 0;\n    idlIx.args.forEach((ixArg) => {\n        ix[ixArg.name] = args[idx];\n        idx += 1;\n    });\n    return ix;\n}\n// Throws error if any account required for the `ix` is not given.\nexport function validateAccounts(ixAccounts, accounts) {\n    ixAccounts.forEach((acc) => {\n        // @ts-ignore\n        if (acc.accounts !== undefined) {\n            // @ts-ignore\n            validateAccounts(acc.accounts, accounts[acc.name]);\n        }\n        else {\n            if (accounts[acc.name] === undefined) {\n                throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n            }\n        }\n    });\n}\n// Translates an address to a Pubkey.\nexport function translateAddress(address) {\n    if (typeof address === \"string\") {\n        const pk = new PublicKey(address);\n        return pk;\n    }\n    else {\n        return address;\n    }\n}\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"module"}