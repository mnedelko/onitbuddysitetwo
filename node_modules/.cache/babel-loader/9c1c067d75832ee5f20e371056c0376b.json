{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nvar apiKey = \"torus-default\";\nvar embedHost = \"\"; // #region API Keys\n\nvar gatewayAuthHeader = \"x-api-key\";\nvar gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\nfunction getApiKeyHeaders() {\n  var headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\nvar promiseTimeout = function promiseTimeout(ms, promise) {\n  var timeout = new Promise(function (resolve, reject) {\n    var id = setTimeout(function () {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n    var options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options_ = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            customOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {}\n            };\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n            options = merge(defaultOptions, options_, {\n              method: \"GET\"\n            });\n            _context.next = 7;\n            return fetch(url, options);\n          case 7:\n            response = _context.sent;\n            if (!response.ok) {\n              _context.next = 10;\n              break;\n            }\n            return _context.abrupt(\"return\", response.json());\n          case 10:\n            debugLogResponse(response);\n            throw response;\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function get(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar post = function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n  var options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(function (response) {\n    if (response.ok) {\n      return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nvar patch = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            data = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            options_ = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            customOptions = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n            options = merge(defaultOptions, options_, {\n              method: \"PATCH\"\n            }); // deep merge changes the structure of form data and url encoded data ,\n            // so we should not deepmerge body data\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n            _context2.next = 9;\n            return fetch(url, options);\n          case 9:\n            response = _context2.sent;\n            if (!response.ok) {\n              _context2.next = 12;\n              break;\n            }\n            return _context2.abrupt(\"return\", response.json());\n          case 12:\n            debugLogResponse(response);\n            throw response;\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function patch(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar remove = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url) {\n    var data,\n      options_,\n      customOptions,\n      defaultOptions,\n      options,\n      response,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n            options_ = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n            customOptions = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};\n            defaultOptions = {\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            }; // for multipart request browser/client will add multipart content type\n            // along with multipart boundary , so for multipart request send\n            // content-type: undefined or send with multipart boundary if already known\n            if (customOptions.useAPIKey) {\n              defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n            }\n            options = merge(defaultOptions, options_, {\n              method: \"DELETE\"\n            });\n            if (customOptions.isUrlEncodedData) {\n              // for multipart request browser/client will add multipart content type\n              // along with multipart boundary , so for multipart request send\n              // content-type: undefined or send with multipart boundary if already known\n              options.body = data; // If url encoded data, this must not be the content type\n\n              if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n            } else {\n              options.body = JSON.stringify(data);\n            }\n            _context3.next = 9;\n            return fetch(url, options);\n          case 9:\n            response = _context3.sent;\n            if (!response.ok) {\n              _context3.next = 12;\n              break;\n            }\n            return _context3.abrupt(\"return\", response.json());\n          case 12:\n            debugLogResponse(response);\n            throw response;\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function remove(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar generateJsonRPCObject = function generateJsonRPCObject(method, parameters) {\n  return {\n    jsonrpc: \"2.0\",\n    method: method,\n    id: 10,\n    params: parameters\n  };\n};\nvar promiseRace = function promiseRace(url, options) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"sources":["../src/index.ts"],"names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","getApiKeyHeaders","headers","debugLogResponse","response","info","status","statusText","url","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","Error","race","get","options_","customOptions","defaultOptions","mode","useAPIKey","options","merge","method","fetch","ok","json","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","remove","generateJsonRPCObject","parameters","jsonrpc","params","promiseRace"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}