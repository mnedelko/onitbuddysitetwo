{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nvar SimulateFactory = /*#__PURE__*/function () {\n  function SimulateFactory() {\n    _classCallCheck(this, SimulateFactory);\n  }\n  _createClass(SimulateFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n      var simulate = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _len,\n            args,\n            _key,\n            tx,\n            _splitArgsAndCtx,\n            _splitArgsAndCtx2,\n            ctx,\n            resp,\n            translatedErr,\n            logs,\n            events,\n            parser,\n            _args = arguments;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = _args[_key];\n                  }\n                  tx = txFn.apply(void 0, args);\n                  _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)), _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2), ctx = _splitArgsAndCtx2[1];\n                  resp = undefined;\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return provider.simulate(tx, ctx.signers, ctx.options);\n                case 7:\n                  resp = _context.sent;\n                  _context.next = 17;\n                  break;\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](4);\n                  console.log(\"Translating error\", _context.t0);\n                  translatedErr = ProgramError.parse(_context.t0, idlErrors);\n                  if (!(translatedErr === null)) {\n                    _context.next = 16;\n                    break;\n                  }\n                  throw _context.t0;\n                case 16:\n                  throw translatedErr;\n                case 17:\n                  if (!(resp === undefined)) {\n                    _context.next = 19;\n                    break;\n                  }\n                  throw new Error(\"Unable to simulate transaction\");\n                case 19:\n                  if (!resp.value.err) {\n                    _context.next = 21;\n                    break;\n                  }\n                  throw new Error(\"Simulate error: \".concat(resp.value.err.toString()));\n                case 21:\n                  logs = resp.value.logs;\n                  if (logs) {\n                    _context.next = 24;\n                    break;\n                  }\n                  throw new Error(\"Simulated logs not found\");\n                case 24:\n                  events = [];\n                  if (idl.events) {\n                    parser = new EventParser(programId, coder);\n                    parser.parseLogs(logs, function (event) {\n                      events.push(event);\n                    });\n                  }\n                  return _context.abrupt(\"return\", {\n                    events: events,\n                    raw: logs\n                  });\n                case 27:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 10]]);\n        }));\n        return function simulate() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      return simulate;\n    }\n  }]);\n  return SimulateFactory;\n}();\nexport { SimulateFactory as default };","map":{"version":3,"sources":["../../../../src/program/namespace/simulate.ts"],"names":[],"mappings":";;;;;AAGA,SAAS,eAAe,QAAQ,YAAY;AAE5C,SAAS,WAAW,QAAe,UAAU;AAG7C,SAAS,YAAY,QAAQ,aAAa;AAAC,IAEtB,eAAe;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAC3B,eACL,KAAqB,EACrB,IAAmB,EACnB,SAA8B,EAC9B,QAAkB,EAClB,KAAY,EACZ,SAAoB,EACpB,GAAQ,EAAA;MAER,IAAM,QAAQ;QAAA,sEAAG;UAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;cAAA;gBAAA;kBAAA,0BAAU,IAAW;oBAAX,IAAW;kBAAA;kBAC9B,EAAE,GAAG,IAAI,eAAI,IAAI,CAAC;kBAAA,mBACR,eAAe,CAAC,KAAK,YAAM,IAAI,EAAE,2DAAxC,GAAG;kBACR,IAAI,GAAG,SAAS;kBAAA;kBAAA;kBAAA,OAEL,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC;gBAAA;kBAA5D,IAAI;kBAAA;kBAAA;gBAAA;kBAAA;kBAAA;kBAEJ,OAAO,CAAC,GAAG,CAAC,mBAAmB,cAAM;kBACjC,aAAa,GAAG,YAAY,CAAC,KAAK,cAAM,SAAS,CAAC;kBAAA,MAClD,aAAa,KAAK,IAAI;oBAAA;oBAAA;kBAAA;kBAAA;gBAAA;kBAAA,MAGpB,aAAa;gBAAA;kBAAA,MAEjB,IAAI,KAAK,SAAS;oBAAA;oBAAA;kBAAA;kBAAA,MACd,IAAI,KAAK,CAAC,gCAAgC,CAAC;gBAAA;kBAAA,KAE/C,IAAI,CAAC,KAAK,CAAC,GAAG;oBAAA;oBAAA;kBAAA;kBAAA,MACV,IAAI,KAAK,2BAAoB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAG;gBAAA;kBAE3D,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI;kBAAA,IACvB,IAAI;oBAAA;oBAAA;kBAAA;kBAAA,MACD,IAAI,KAAK,CAAC,0BAA0B,CAAC;gBAAA;kBAGvC,MAAM,GAAG,EAAE;kBACjB,IAAI,GAAG,CAAC,MAAM,EAAE;oBACV,MAAM,GAAG,IAAI,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC;oBAC9C,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,UAAC,KAAK,EAAI;sBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACpB,CAAC,CAAC;;kBACH,iCACM;oBAAE,MAAM,EAAN,MAAM;oBAAE,GAAG,EAAE;kBAAI,CAAE;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAC7B;QAAA,gBAjCK,QAAQ;UAAA;QAAA;MAAA,GAiCb;MAED,OAAO,QAAQ;IACjB;EAAC;EAAA;AAAA;AAAA,SA9CkB,eAAe","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n        const simulate = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            let resp = undefined;\n            try {\n                resp = await provider.simulate(tx, ctx.signers, ctx.options);\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n            if (resp === undefined) {\n                throw new Error(\"Unable to simulate transaction\");\n            }\n            if (resp.value.err) {\n                throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n            }\n            const logs = resp.value.logs;\n            if (!logs) {\n                throw new Error(\"Simulated logs not found\");\n            }\n            const events = [];\n            if (idl.events) {\n                let parser = new EventParser(programId, coder);\n                parser.parseLogs(logs, (event) => {\n                    events.push(event);\n                });\n            }\n            return { events, raw: logs };\n        };\n        return simulate;\n    }\n}\n//# sourceMappingURL=simulate.js.map"]},"metadata":{},"sourceType":"module"}