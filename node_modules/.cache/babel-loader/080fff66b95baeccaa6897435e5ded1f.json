{"ast":null,"code":"import _classCallCheck from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\";\n// Re-exports.\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\nvar NamespaceFactory = /*#__PURE__*/function () {\n  function NamespaceFactory() {\n    _classCallCheck(this, NamespaceFactory);\n  }\n  _createClass(NamespaceFactory, null, [{\n    key: \"build\",\n    value:\n    /**\n     * Generates all namespaces for a given program.\n     */\n    function build(idl, coder, programId, provider) {\n      var rpc = {};\n      var instruction = {};\n      var transaction = {};\n      var simulate = {};\n      var idlErrors = parseIdlErrors(idl);\n      var state = StateFactory.build(idl, coder, programId, provider);\n      idl.instructions.forEach(function (idlIx) {\n        var ixItem = InstructionFactory.build(idlIx, function (ixName, ix) {\n          return coder.instruction.encode(ixName, ix);\n        }, programId);\n        var txItem = TransactionFactory.build(idlIx, ixItem);\n        var rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n        var simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n        var name = camelCase(idlIx.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n        simulate[name] = simulateItem;\n      });\n      var account = idl.accounts ? AccountFactory.build(idl, coder, programId, provider) : {};\n      return [rpc, instruction, transaction, account, simulate, state];\n    }\n  }]);\n  return NamespaceFactory;\n}();\nexport { NamespaceFactory as default };","map":{"version":3,"sources":["../../../../src/program/namespace/index.ts"],"names":[],"mappings":";;AAAA,OAAO,SAAS,MAAM,WAAW;AAKjC,OAAO,YAA6B,MAAM,SAAS;AACnD,OAAO,kBAA4C,MAAM,eAAe;AACxE,OAAO,kBAA4C,MAAM,eAAe;AACxE,OAAO,UAA4B,MAAM,OAAO;AAChD,OAAO,cAAoC,MAAM,WAAW;AAC5D,OAAO,eAAsC,MAAM,YAAY;AAC/D,SAAS,cAAc,QAAQ,WAAW;AAE1C;AACA,SAAS,WAAW,QAAQ,SAAS;AAIrC,SAA2B,aAAa,QAAwB,WAAW;AAAC,IAGvD,gBAAgB;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACnC;;AAEG;IACI,eACL,GAAQ,EACR,KAAY,EACZ,SAAoB,EACpB,QAAkB,EAAA;MASlB,IAAM,GAAG,GAAiB,CAAA,CAAE;MAC5B,IAAM,WAAW,GAAyB,CAAA,CAAE;MAC5C,IAAM,WAAW,GAAyB,CAAA,CAAE;MAC5C,IAAM,QAAQ,GAAsB,CAAA,CAAE;MAEtC,IAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC;MAErC,IAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC;MAEjE,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,KAAK,EAAI;QACjC,IAAM,MAAM,GAAG,kBAAkB,CAAC,KAAK,CACrC,KAAK,EACL,UAAC,MAAc,EAAE,EAAO;UAAA,OAAK,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC;QAAA,GACjE,SAAS,CACV;QACD,IAAM,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC;QACtD,IAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC;QACpE,IAAM,YAAY,GAAG,eAAe,CAAC,KAAK,CACxC,KAAK,EACL,MAAM,EACN,SAAS,EACT,QAAQ,EACR,KAAK,EACL,SAAS,EACT,GAAG,CACJ;QAED,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;QAElC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM;QAC1B,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM;QAC1B,GAAG,CAAC,IAAI,CAAC,GAAG,OAAO;QACnB,QAAQ,CAAC,IAAI,CAAC,GAAG,YAAY;MAC/B,CAAC,CAAC;MAEF,IAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,GACxB,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,GACrD,CAAA,CAAE;MAEN,OAAO,CAAC,GAAG,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;IAClE;EAAC;EAAA;AAAA;AAAA,SAzDkB,gBAAgB","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\";\n// Re-exports.\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\nexport default class NamespaceFactory {\n    /**\n     * Generates all namespaces for a given program.\n     */\n    static build(idl, coder, programId, provider) {\n        const rpc = {};\n        const instruction = {};\n        const transaction = {};\n        const simulate = {};\n        const idlErrors = parseIdlErrors(idl);\n        const state = StateFactory.build(idl, coder, programId, provider);\n        idl.instructions.forEach((idlIx) => {\n            const ixItem = InstructionFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);\n            const txItem = TransactionFactory.build(idlIx, ixItem);\n            const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n            const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n            const name = camelCase(idlIx.name);\n            instruction[name] = ixItem;\n            transaction[name] = txItem;\n            rpc[name] = rpcItem;\n            simulate[name] = simulateItem;\n        });\n        const account = idl.accounts\n            ? AccountFactory.build(idl, coder, programId, provider)\n            : {};\n        return [rpc, instruction, transaction, account, simulate, state];\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}