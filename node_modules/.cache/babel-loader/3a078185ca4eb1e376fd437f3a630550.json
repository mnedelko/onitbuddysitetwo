{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar _a;\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n(function (DeviceModelId) {\n  DeviceModelId[\"blue\"] = \"blue\";\n  DeviceModelId[\"nanoS\"] = \"nanoS\";\n  DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n  DeviceModelId[\"nanoX\"] = \"nanoX\";\n  DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {}, _a[DeviceModelId.blue] = {\n  id: DeviceModelId.blue,\n  productName: \"Ledger Blue\",\n  productIdMM: 0x00,\n  legacyUsbProductId: 0x0000,\n  usbOnly: true,\n  memorySize: 480 * 1024,\n  masks: [0x31000000, 0x31010000],\n  getBlockSize: function getBlockSize(_firwareVersion) {\n    return 4 * 1024;\n  }\n}, _a[DeviceModelId.nanoS] = {\n  id: DeviceModelId.nanoS,\n  productName: \"Ledger Nano S\",\n  productIdMM: 0x10,\n  legacyUsbProductId: 0x0001,\n  usbOnly: true,\n  memorySize: 320 * 1024,\n  masks: [0x31100000],\n  getBlockSize: function getBlockSize(firmwareVersion) {\n    var _a;\n    return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n  }\n}, _a[DeviceModelId.nanoSP] = {\n  id: DeviceModelId.nanoSP,\n  productName: \"Ledger Nano S Plus\",\n  productIdMM: 0x50,\n  legacyUsbProductId: 0x0005,\n  usbOnly: true,\n  memorySize: 1536 * 1024,\n  masks: [0x33100000],\n  getBlockSize: function getBlockSize(_firmwareVersion) {\n    return 32;\n  }\n}, _a[DeviceModelId.nanoX] = {\n  id: DeviceModelId.nanoX,\n  productName: \"Ledger Nano X\",\n  productIdMM: 0x40,\n  legacyUsbProductId: 0x0004,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33000000],\n  getBlockSize: function getBlockSize(_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n  }]\n}, _a[DeviceModelId.nanoFTS] = {\n  id: DeviceModelId.nanoFTS,\n  productName: \"Ledger Nano FTS\",\n  productIdMM: 0x60,\n  legacyUsbProductId: 0x0006,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33200000],\n  getBlockSize: function getBlockSize(_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n    writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n  }]\n}, _a);\nvar productMap = {\n  Blue: DeviceModelId.blue,\n  \"Nano S\": DeviceModelId.nanoS,\n  \"Nano S Plus\": DeviceModelId.nanoSP,\n  \"Nano X\": DeviceModelId.nanoX,\n  \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\nexport var getDeviceModel = function getDeviceModel(id) {\n  var info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport var identifyTargetId = function identifyTargetId(targetId) {\n  var deviceModel = devicesList.find(function (_a) {\n    var masks = _a.masks;\n    return masks.find(function (mask) {\n      return (targetId & 0xffff0000) === mask;\n    });\n  });\n  return deviceModel;\n};\n/**\n *\n */\nexport var identifyUSBProductId = function identifyUSBProductId(usbProductId) {\n  var legacy = devicesList.find(function (d) {\n    return d.legacyUsbProductId === usbProductId;\n  });\n  if (legacy) return legacy;\n  var mm = usbProductId >> 8;\n  var deviceModel = devicesList.find(function (d) {\n    return d.productIdMM === mm;\n  });\n  return deviceModel;\n};\nexport var identifyProductName = function identifyProductName(productName) {\n  var deviceModel = devicesList.find(function (d) {\n    return d.id === productMap[productName];\n  });\n  return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor (var id in devices) {\n  var deviceModel = devices[id];\n  var bluetoothSpec = deviceModel.bluetoothSpec;\n  if (bluetoothSpec) {\n    for (var i = 0; i < bluetoothSpec.length; i++) {\n      var spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({\n        deviceModel: deviceModel\n      }, spec);\n    }\n  }\n}\n/**\n *\n */\nexport var getBluetoothServiceUuids = function getBluetoothServiceUuids() {\n  return bluetoothServices;\n};\n/**\n *\n */\nexport var getInfosForServiceUuid = function getInfosForServiceUuid(uuid) {\n  return serviceUuidToInfos[uuid.toLowerCase()];\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a;\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n(function (DeviceModelId) {\n    DeviceModelId[\"blue\"] = \"blue\";\n    DeviceModelId[\"nanoS\"] = \"nanoS\";\n    DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n    DeviceModelId[\"nanoX\"] = \"nanoX\";\n    DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {},\n    _a[DeviceModelId.blue] = {\n        id: DeviceModelId.blue,\n        productName: \"Ledger Blue\",\n        productIdMM: 0x00,\n        legacyUsbProductId: 0x0000,\n        usbOnly: true,\n        memorySize: 480 * 1024,\n        masks: [0x31000000, 0x31010000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; }\n    },\n    _a[DeviceModelId.nanoS] = {\n        id: DeviceModelId.nanoS,\n        productName: \"Ledger Nano S\",\n        productIdMM: 0x10,\n        legacyUsbProductId: 0x0001,\n        usbOnly: true,\n        memorySize: 320 * 1024,\n        masks: [0x31100000],\n        getBlockSize: function (firmwareVersion) {\n            var _a;\n            return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\")\n                ? 4 * 1024\n                : 2 * 1024;\n        }\n    },\n    _a[DeviceModelId.nanoSP] = {\n        id: DeviceModelId.nanoSP,\n        productName: \"Ledger Nano S Plus\",\n        productIdMM: 0x50,\n        legacyUsbProductId: 0x0005,\n        usbOnly: true,\n        memorySize: 1536 * 1024,\n        masks: [0x33100000],\n        getBlockSize: function (_firmwareVersion) { return 32; }\n    },\n    _a[DeviceModelId.nanoX] = {\n        id: DeviceModelId.nanoX,\n        productName: \"Ledger Nano X\",\n        productIdMM: 0x40,\n        legacyUsbProductId: 0x0004,\n        usbOnly: false,\n        memorySize: 2 * 1024 * 1024,\n        masks: [0x33000000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; },\n        bluetoothSpec: [\n            {\n                serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n                notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n                writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n                writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n            },\n        ]\n    },\n    _a[DeviceModelId.nanoFTS] = {\n        id: DeviceModelId.nanoFTS,\n        productName: \"Ledger Nano FTS\",\n        productIdMM: 0x60,\n        legacyUsbProductId: 0x0006,\n        usbOnly: false,\n        memorySize: 2 * 1024 * 1024,\n        masks: [0x33200000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; },\n        bluetoothSpec: [\n            {\n                serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n                notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n                writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n                writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n            },\n        ]\n    },\n    _a);\nvar productMap = {\n    Blue: DeviceModelId.blue,\n    \"Nano S\": DeviceModelId.nanoS,\n    \"Nano S Plus\": DeviceModelId.nanoSP,\n    \"Nano X\": DeviceModelId.nanoX,\n    \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\nexport var getDeviceModel = function (id) {\n    var info = devices[id];\n    if (!info)\n        throw new Error(\"device '\" + id + \"' does not exist\");\n    return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport var identifyTargetId = function (targetId) {\n    var deviceModel = devicesList.find(function (_a) {\n        var masks = _a.masks;\n        return masks.find(function (mask) { return (targetId & 0xffff0000) === mask; });\n    });\n    return deviceModel;\n};\n/**\n *\n */\nexport var identifyUSBProductId = function (usbProductId) {\n    var legacy = devicesList.find(function (d) { return d.legacyUsbProductId === usbProductId; });\n    if (legacy)\n        return legacy;\n    var mm = usbProductId >> 8;\n    var deviceModel = devicesList.find(function (d) { return d.productIdMM === mm; });\n    return deviceModel;\n};\nexport var identifyProductName = function (productName) {\n    var deviceModel = devicesList.find(function (d) { return d.id === productMap[productName]; });\n    return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor (var id in devices) {\n    var deviceModel = devices[id];\n    var bluetoothSpec = deviceModel.bluetoothSpec;\n    if (bluetoothSpec) {\n        for (var i = 0; i < bluetoothSpec.length; i++) {\n            var spec = bluetoothSpec[i];\n            bluetoothServices.push(spec.serviceUuid);\n            serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({ deviceModel: deviceModel }, spec);\n        }\n    }\n}\n/**\n *\n */\nexport var getBluetoothServiceUuids = function () { return bluetoothServices; };\n/**\n *\n */\nexport var getInfosForServiceUuid = function (uuid) { return serviceUuidToInfos[uuid.toLowerCase()]; };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}