{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nvar U32_MASK64 = BigInt(Math.pow(2, 32) - 1);\nvar _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n) {\n  var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexports.fromBig = fromBig;\nfunction split(lst) {\n  var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var Ah = new Uint32Array(lst.length);\n  var Al = new Uint32Array(lst.length);\n  for (var i = 0; i < lst.length; i++) {\n    var _fromBig = fromBig(lst[i], le),\n      h = _fromBig.h,\n      l = _fromBig.l;\n    var _ref = [h, l];\n    Ah[i] = _ref[0];\n    Al[i] = _ref[1];\n  }\n  return [Ah, Al];\n}\nexports.split = split;\nvar toBig = function toBig(h, l) {\n  return BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n};\nexports.toBig = toBig;\n// for Shift in [0, 32)\nvar shrSH = function shrSH(h, l, s) {\n  return h >>> s;\n};\nvar shrSL = function shrSL(h, l, s) {\n  return h << 32 - s | l >>> s;\n};\n// Right rotate for Shift in [1, 32)\nvar rotrSH = function rotrSH(h, l, s) {\n  return h >>> s | l << 32 - s;\n};\nvar rotrSL = function rotrSL(h, l, s) {\n  return h << 32 - s | l >>> s;\n};\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nvar rotrBH = function rotrBH(h, l, s) {\n  return h << 64 - s | l >>> s - 32;\n};\nvar rotrBL = function rotrBL(h, l, s) {\n  return h >>> s - 32 | l << 64 - s;\n};\n// Right rotate for shift===32 (just swaps l&h)\nvar rotr32H = function rotr32H(h, l) {\n  return l;\n};\nvar rotr32L = function rotr32L(h, l) {\n  return h;\n};\n// Left rotate for Shift in [1, 32)\nvar rotlSH = function rotlSH(h, l, s) {\n  return h << s | l >>> 32 - s;\n};\nvar rotlSL = function rotlSL(h, l, s) {\n  return l << s | h >>> 32 - s;\n};\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nvar rotlBH = function rotlBH(h, l, s) {\n  return l << s - 32 | h >>> 64 - s;\n};\nvar rotlBL = function rotlBL(h, l, s) {\n  return h << s - 32 | l >>> 64 - s;\n};\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n  var l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / Math.pow(2, 32) | 0) | 0,\n    l: l | 0\n  };\n}\nexports.add = add;\n// Addition with more than 2 elements\nvar add3L = function add3L(Al, Bl, Cl) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n};\nvar add3H = function add3H(low, Ah, Bh, Ch) {\n  return Ah + Bh + Ch + (low / Math.pow(2, 32) | 0) | 0;\n};\nvar add4L = function add4L(Al, Bl, Cl, Dl) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n};\nvar add4H = function add4H(low, Ah, Bh, Ch, Dh) {\n  return Ah + Bh + Ch + Dh + (low / Math.pow(2, 32) | 0) | 0;\n};\nvar add5L = function add5L(Al, Bl, Cl, Dl, El) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n};\nvar add5H = function add5H(low, Ah, Bh, Ch, Dh, Eh) {\n  return Ah + Bh + Ch + Dh + Eh + (low / Math.pow(2, 32) | 0) | 0;\n};\n// prettier-ignore\nvar u64 = {\n  fromBig: fromBig,\n  split: split,\n  toBig: exports.toBig,\n  shrSH: shrSH,\n  shrSL: shrSL,\n  rotrSH: rotrSH,\n  rotrSL: rotrSL,\n  rotrBH: rotrBH,\n  rotrBL: rotrBL,\n  rotr32H: rotr32H,\n  rotr32L: rotr32L,\n  rotlSH: rotlSH,\n  rotlSL: rotlSL,\n  rotlBH: rotlBH,\n  rotlBL: rotlBL,\n  add: add,\n  add3L: add3L,\n  add3H: add3H,\n  add4L: add4L,\n  add4H: add4H,\n  add5H: add5H,\n  add5L: add5L\n};\nexports.default = u64;","map":{"version":3,"names":["Object","defineProperty","exports","value","add","toBig","split","fromBig","U32_MASK64","BigInt","_32n","n","le","h","Number","l","lst","Ah","Uint32Array","length","Al","i","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","default"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@noble/hashes/_u64.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}