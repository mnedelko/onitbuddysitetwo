{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nvar initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false\n};\nexport var WalletProvider = function WalletProvider(_ref) {\n  var children = _ref.children,\n    wallets = _ref.wallets,\n    _ref$autoConnect = _ref.autoConnect,\n    autoConnect = _ref$autoConnect === void 0 ? false : _ref$autoConnect,\n    _ref$onError = _ref.onError,\n    _onError = _ref$onError === void 0 ? function (error) {\n      return console.error(error);\n    } : _ref$onError,\n    _ref$localStorageKey = _ref.localStorageKey,\n    localStorageKey = _ref$localStorageKey === void 0 ? 'walletName' : _ref$localStorageKey;\n  var _useLocalStorage = useLocalStorage(localStorageKey, null),\n    _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n    name = _useLocalStorage2[0],\n    setName = _useLocalStorage2[1];\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    _useState2$ = _useState2[0],\n    wallet = _useState2$.wallet,\n    adapter = _useState2$.adapter,\n    ready = _useState2$.ready,\n    publicKey = _useState2$.publicKey,\n    connected = _useState2$.connected,\n    setState = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    connecting = _useState4[0],\n    setConnecting = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    disconnecting = _useState6[0],\n    setDisconnecting = _useState6[1];\n  var isConnecting = useRef(false);\n  var isDisconnecting = useRef(false);\n  var isUnloading = useRef(false);\n  // Map of wallet names to wallets\n  var walletsByName = useMemo(function () {\n    return wallets.reduce(function (walletsByName, wallet) {\n      walletsByName[wallet.name] = wallet;\n      return walletsByName;\n    }, {});\n  }, [wallets]);\n  // When the selected wallet changes, initialize the state\n  useEffect(function () {\n    var wallet = name && walletsByName[name] || null;\n    var adapter = wallet && wallet.adapter();\n    if (adapter) {\n      var _ready = adapter.ready,\n        _publicKey = adapter.publicKey,\n        _connected = adapter.connected;\n      setState({\n        wallet: wallet,\n        adapter: adapter,\n        connected: _connected,\n        publicKey: _publicKey,\n        ready: _ready\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]);\n  // If autoConnect is enabled, try to connect when the adapter changes and is ready\n  useEffect(function () {\n    if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready) return;\n    (function () {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isConnecting.current = true;\n                setConnecting(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return adapter.connect();\n              case 5:\n                _context.next = 10;\n                break;\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n                // Clear the selected wallet\n                setName(null);\n                // Don't throw error, but onError will still be called\n              case 10:\n                _context.prev = 10;\n                setConnecting(false);\n                isConnecting.current = false;\n                return _context.finish(10);\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 7, 10, 14]]);\n      }));\n    })();\n  }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]);\n  // If the window is closing or reloading, ignore disconnect and error events from the adapter\n  useEffect(function () {\n    function listener() {\n      isUnloading.current = true;\n    }\n    window.addEventListener('beforeunload', listener);\n    return function () {\n      return window.removeEventListener('beforeunload', listener);\n    };\n  }, [isUnloading]);\n  // Select a wallet by name\n  var select = useCallback(function (newName) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(name === newName)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 2:\n              if (!adapter) {\n                _context2.next = 5;\n                break;\n              }\n              _context2.next = 5;\n              return adapter.disconnect();\n            case 5:\n              setName(newName);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  }, [name, adapter, setName]);\n  // Handle the adapter's ready event\n  var onReady = useCallback(function () {\n    return setState(function (state) {\n      return Object.assign(Object.assign({}, state), {\n        ready: true\n      });\n    });\n  }, [setState]);\n  // Handle the adapter's connect event\n  var onConnect = useCallback(function () {\n    if (!adapter) return;\n    var connected = adapter.connected,\n      publicKey = adapter.publicKey,\n      ready = adapter.ready;\n    setState(function (state) {\n      return Object.assign(Object.assign({}, state), {\n        connected: connected,\n        publicKey: publicKey,\n        ready: ready\n      });\n    });\n  }, [adapter, setState]);\n  // Handle the adapter's disconnect event\n  var onDisconnect = useCallback(function () {\n    // Clear the selected wallet unless the window is unloading\n    if (!isUnloading.current) setName(null);\n  }, [isUnloading, setName]);\n  // Handle the adapter's error event, and local errors\n  var onError = useCallback(function (error) {\n    // Call the provided error handler unless the window is unloading\n    if (!isUnloading.current) _onError(error);\n    return error;\n  }, [isUnloading, _onError]);\n  // Connect the adapter to the wallet\n  var connect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(isConnecting.current || connecting || disconnecting || connected)) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              if (!(!wallet || !adapter)) {\n                _context3.next = 4;\n                break;\n              }\n              throw onError(new WalletNotSelectedError());\n            case 4:\n              if (ready) {\n                _context3.next = 8;\n                break;\n              }\n              // Clear the selected wallet\n              setName(null);\n              if (typeof window !== 'undefined') {\n                window.open(wallet.url, '_blank');\n              }\n              throw onError(new WalletNotReadyError());\n            case 8:\n              isConnecting.current = true;\n              setConnecting(true);\n              _context3.prev = 10;\n              _context3.next = 13;\n              return adapter.connect();\n            case 13:\n              _context3.next = 19;\n              break;\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](10);\n              // Clear the selected wallet\n              setName(null);\n              // Rethrow the error, and onError will also be called\n              throw _context3.t0;\n            case 19:\n              _context3.prev = 19;\n              setConnecting(false);\n              isConnecting.current = false;\n              return _context3.finish(19);\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[10, 15, 19, 23]]);\n    }));\n  }, [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]);\n  // Disconnect the adapter from the wallet\n  var disconnect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(isDisconnecting.current || disconnecting)) {\n                _context4.next = 2;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 2:\n              if (adapter) {\n                _context4.next = 4;\n                break;\n              }\n              return _context4.abrupt(\"return\", setName(null));\n            case 4:\n              isDisconnecting.current = true;\n              setDisconnecting(true);\n              _context4.prev = 6;\n              _context4.next = 9;\n              return adapter.disconnect();\n            case 9:\n              _context4.next = 15;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](6);\n              // Clear the selected wallet\n              setName(null);\n              // Rethrow the error, and onError will also be called\n              throw _context4.t0;\n            case 15:\n              _context4.prev = 15;\n              setDisconnecting(false);\n              isDisconnecting.current = false;\n              return _context4.finish(15);\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[6, 11, 15, 19]]);\n    }));\n  }, [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]);\n  // Send a transaction using the provided connection\n  var sendTransaction = useCallback(function (transaction, connection, options) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (adapter) {\n                _context5.next = 2;\n                break;\n              }\n              throw onError(new WalletNotSelectedError());\n            case 2:\n              if (connected) {\n                _context5.next = 4;\n                break;\n              }\n              throw onError(new WalletNotConnectedError());\n            case 4:\n              _context5.next = 6;\n              return adapter.sendTransaction(transaction, connection, options);\n            case 6:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  }, [adapter, onError, connected]);\n  // Sign a transaction if the wallet supports it\n  var signTransaction = useMemo(function () {\n    return adapter && 'signTransaction' in adapter ? function (transaction) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (connected) {\n                  _context6.next = 2;\n                  break;\n                }\n                throw onError(new WalletNotConnectedError());\n              case 2:\n                _context6.next = 4;\n                return adapter.signTransaction(transaction);\n              case 4:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]);\n  // Sign multiple transactions if the wallet supports it\n  var signAllTransactions = useMemo(function () {\n    return adapter && 'signAllTransactions' in adapter ? function (transactions) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (connected) {\n                  _context7.next = 2;\n                  break;\n                }\n                throw onError(new WalletNotConnectedError());\n              case 2:\n                _context7.next = 4;\n                return adapter.signAllTransactions(transactions);\n              case 4:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]);\n  // Sign an arbitrary message if the wallet supports it\n  var signMessage = useMemo(function () {\n    return adapter && 'signMessage' in adapter ? function (message) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (connected) {\n                  _context8.next = 2;\n                  break;\n                }\n                throw onError(new WalletNotConnectedError());\n              case 2:\n                _context8.next = 4;\n                return adapter.signMessage(message);\n              case 4:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n    } : undefined;\n  }, [adapter, onError, connected]);\n  // Setup and teardown event listeners when the adapter changes\n  useEffect(function () {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return function () {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets: wallets,\n      autoConnect: autoConnect,\n      wallet: wallet,\n      adapter: adapter,\n      publicKey: publicKey,\n      ready: ready,\n      connected: connected,\n      connecting: connecting,\n      disconnecting: disconnecting,\n      select: select,\n      connect: connect,\n      disconnect: disconnect,\n      sendTransaction: sendTransaction,\n      signTransaction: signTransaction,\n      signAllTransactions: signAllTransactions,\n      signMessage: signMessage\n    }\n  }, children);\n};","map":{"version":3,"sources":["../src/WalletProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { WalletNotConnectedError, WalletNotReadyError, } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n    wallet: null,\n    adapter: null,\n    ready: false,\n    publicKey: null,\n    connected: false,\n};\nexport const WalletProvider = ({ children, wallets, autoConnect = false, onError: _onError = (error) => console.error(error), localStorageKey = 'walletName', }) => {\n    const [name, setName] = useLocalStorage(localStorageKey, null);\n    const [{ wallet, adapter, ready, publicKey, connected }, setState] = useState(initialState);\n    const [connecting, setConnecting] = useState(false);\n    const [disconnecting, setDisconnecting] = useState(false);\n    const isConnecting = useRef(false);\n    const isDisconnecting = useRef(false);\n    const isUnloading = useRef(false);\n    // Map of wallet names to wallets\n    const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n        walletsByName[wallet.name] = wallet;\n        return walletsByName;\n    }, {}), [wallets]);\n    // When the selected wallet changes, initialize the state\n    useEffect(() => {\n        const wallet = (name && walletsByName[name]) || null;\n        const adapter = wallet && wallet.adapter();\n        if (adapter) {\n            const { ready, publicKey, connected } = adapter;\n            setState({ wallet, adapter, connected, publicKey, ready });\n        }\n        else {\n            setState(initialState);\n        }\n    }, [name, walletsByName, setState]);\n    // If autoConnect is enabled, try to connect when the adapter changes and is ready\n    useEffect(() => {\n        if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready)\n            return;\n        (function () {\n            return __awaiter(this, void 0, void 0, function* () {\n                isConnecting.current = true;\n                setConnecting(true);\n                try {\n                    yield adapter.connect();\n                }\n                catch (error) {\n                    // Clear the selected wallet\n                    setName(null);\n                    // Don't throw error, but onError will still be called\n                }\n                finally {\n                    setConnecting(false);\n                    isConnecting.current = false;\n                }\n            });\n        })();\n    }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]);\n    // If the window is closing or reloading, ignore disconnect and error events from the adapter\n    useEffect(() => {\n        function listener() {\n            isUnloading.current = true;\n        }\n        window.addEventListener('beforeunload', listener);\n        return () => window.removeEventListener('beforeunload', listener);\n    }, [isUnloading]);\n    // Select a wallet by name\n    const select = useCallback((newName) => __awaiter(void 0, void 0, void 0, function* () {\n        if (name === newName)\n            return;\n        if (adapter)\n            yield adapter.disconnect();\n        setName(newName);\n    }), [name, adapter, setName]);\n    // Handle the adapter's ready event\n    const onReady = useCallback(() => setState((state) => (Object.assign(Object.assign({}, state), { ready: true }))), [setState]);\n    // Handle the adapter's connect event\n    const onConnect = useCallback(() => {\n        if (!adapter)\n            return;\n        const { connected, publicKey, ready } = adapter;\n        setState((state) => (Object.assign(Object.assign({}, state), { connected,\n            publicKey,\n            ready })));\n    }, [adapter, setState]);\n    // Handle the adapter's disconnect event\n    const onDisconnect = useCallback(() => {\n        // Clear the selected wallet unless the window is unloading\n        if (!isUnloading.current)\n            setName(null);\n    }, [isUnloading, setName]);\n    // Handle the adapter's error event, and local errors\n    const onError = useCallback((error) => {\n        // Call the provided error handler unless the window is unloading\n        if (!isUnloading.current)\n            _onError(error);\n        return error;\n    }, [isUnloading, _onError]);\n    // Connect the adapter to the wallet\n    const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isConnecting.current || connecting || disconnecting || connected)\n            return;\n        if (!wallet || !adapter)\n            throw onError(new WalletNotSelectedError());\n        if (!ready) {\n            // Clear the selected wallet\n            setName(null);\n            if (typeof window !== 'undefined') {\n                window.open(wallet.url, '_blank');\n            }\n            throw onError(new WalletNotReadyError());\n        }\n        isConnecting.current = true;\n        setConnecting(true);\n        try {\n            yield adapter.connect();\n        }\n        catch (error) {\n            // Clear the selected wallet\n            setName(null);\n            // Rethrow the error, and onError will also be called\n            throw error;\n        }\n        finally {\n            setConnecting(false);\n            isConnecting.current = false;\n        }\n    }), [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]);\n    // Disconnect the adapter from the wallet\n    const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isDisconnecting.current || disconnecting)\n            return;\n        if (!adapter)\n            return setName(null);\n        isDisconnecting.current = true;\n        setDisconnecting(true);\n        try {\n            yield adapter.disconnect();\n        }\n        catch (error) {\n            // Clear the selected wallet\n            setName(null);\n            // Rethrow the error, and onError will also be called\n            throw error;\n        }\n        finally {\n            setDisconnecting(false);\n            isDisconnecting.current = false;\n        }\n    }), [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]);\n    // Send a transaction using the provided connection\n    const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!adapter)\n            throw onError(new WalletNotSelectedError());\n        if (!connected)\n            throw onError(new WalletNotConnectedError());\n        return yield adapter.sendTransaction(transaction, connection, options);\n    }), [adapter, onError, connected]);\n    // Sign a transaction if the wallet supports it\n    const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter\n        ? (transaction) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signTransaction(transaction);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign multiple transactions if the wallet supports it\n    const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter\n        ? (transactions) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signAllTransactions(transactions);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign an arbitrary message if the wallet supports it\n    const signMessage = useMemo(() => adapter && 'signMessage' in adapter\n        ? (message) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signMessage(message);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Setup and teardown event listeners when the adapter changes\n    useEffect(() => {\n        if (adapter) {\n            adapter.on('ready', onReady);\n            adapter.on('connect', onConnect);\n            adapter.on('disconnect', onDisconnect);\n            adapter.on('error', onError);\n            return () => {\n                adapter.off('ready', onReady);\n                adapter.off('connect', onConnect);\n                adapter.off('disconnect', onDisconnect);\n                adapter.off('error', onError);\n            };\n        }\n    }, [adapter, onReady, onConnect, onDisconnect, onError]);\n    return (React.createElement(WalletContext.Provider, { value: {\n            wallets,\n            autoConnect,\n            wallet,\n            adapter,\n            publicKey,\n            ready,\n            connected,\n            connecting,\n            disconnecting,\n            select,\n            connect,\n            disconnect,\n            sendTransaction,\n            signTransaction,\n            signAllTransactions,\n            signMessage,\n        } }, children));\n};\n//# sourceMappingURL=WalletProvider.js.map"]},"metadata":{},"sourceType":"module"}