{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nvar solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nvar common_gateway_react_1 = require(\"@civic/common-gateway-react\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nvar config_1 = require(\"./config\");\nvar version_1 = require(\"./version\");\nvar util_1 = require(\"./util\");\nvar chainImplementation = function chainImplementation(_ref) {\n  var clusterUrl = _ref.clusterUrl,\n    cluster = _ref.cluster,\n    publicKey = _ref.publicKey,\n    signTransaction = _ref.signTransaction,\n    handleTransaction = _ref.handleTransaction,\n    gatekeeperNetworkAddress = _ref.gatekeeperNetworkAddress,\n    stage = _ref.stage;\n  common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n  var connection = new web3_js_1.Connection(clusterUrl, 'processed');\n  var requiresSignature = function requiresSignature(transaction) {\n    return transaction.signatures.find(function (sig) {\n      return sig.publicKey.equals(publicKey);\n    }) !== undefined;\n  };\n  var submitTransaction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transaction) {\n      var txSig;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return connection.sendRawTransaction(transaction.serialize());\n            case 2:\n              txSig = _context.sent;\n              _context.next = 5;\n              return connection.confirmTransaction(txSig);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function submitTransaction(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return {\n    dAppHandlesTransactions: !!handleTransaction,\n    addOnGatewayTokenChangeListener: function () {\n      var _addOnGatewayTokenChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gatewayToken, tokenDidChange) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), function (token) {\n                  tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: common_gateway_react_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime\n                  });\n                })));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function addOnGatewayTokenChangeListener(_x2, _x3) {\n        return _addOnGatewayTokenChangeListener.apply(this, arguments);\n      }\n      return addOnGatewayTokenChangeListener;\n    }(),\n    removeOnGatewayTokenChangeListener: function removeOnGatewayTokenChangeListener(listenerId) {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: function () {\n      var _findGatewayToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var onChainToken;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n              case 2:\n                onChainToken = _context3.sent;\n                if (onChainToken) {\n                  _context3.next = 5;\n                  break;\n                }\n                return _context3.abrupt(\"return\", undefined);\n              case 5:\n                return _context3.abrupt(\"return\", {\n                  issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                  gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                  owner: onChainToken.owner.toBase58(),\n                  state: common_gateway_react_1.State[onChainToken.state],\n                  identifier: onChainToken.publicKey.toBase58(),\n                  expiryTime: onChainToken.expiryTime\n                });\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function findGatewayToken() {\n        return _findGatewayToken.apply(this, arguments);\n      }\n      return findGatewayToken;\n    }(),\n    proveWalletOwnership: function () {\n      var _proveWalletOwnership = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n              case 2:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result.toString('base64'));\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      function proveWalletOwnership() {\n        return _proveWalletOwnership.apply(this, arguments);\n      }\n      return proveWalletOwnership;\n    }(),\n    handleUserSignedTransaction: function () {\n      var _handleUserSignedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(partiallySignedTx) {\n        var transaction, transactionToSend;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                common_gateway_react_1.logger.debug('handleUserSignedTransaction, user-provided handleTransaction', !!handleTransaction);\n                transaction = (0, util_1.createSolanaTransactionFromBase64)(partiallySignedTx);\n                if (!handleTransaction) {\n                  _context5.next = 7;\n                  break;\n                }\n                _context5.next = 6;\n                return handleTransaction(transaction);\n              case 6:\n                return _context5.abrupt(\"return\");\n              case 7:\n                transactionToSend = transaction;\n                if (!requiresSignature(transaction)) {\n                  _context5.next = 12;\n                  break;\n                }\n                _context5.next = 11;\n                return signTransaction(transaction);\n              case 11:\n                transactionToSend = _context5.sent;\n              case 12:\n                _context5.next = 14;\n                return submitTransaction(transactionToSend);\n              case 14:\n                _context5.next = 24;\n                break;\n              case 16:\n                _context5.prev = 16;\n                _context5.t0 = _context5[\"catch\"](0);\n                if (!(_context5.t0 instanceof web3_js_1.SendTransactionError)) {\n                  _context5.next = 22;\n                  break;\n                }\n                common_gateway_react_1.logger.debug('error is instance of SendTransactionError', _context5.t0);\n                common_gateway_react_1.logger.debug(\"parseSolanaErrorCode(\".concat(_context5.t0.message, \") = \").concat((0, util_1.parseSolanaErrorCode)(_context5.t0.message)));\n                throw new common_gateway_react_1.ChainError(_context5.t0.message, (0, util_1.parseSolanaErrorCode)(_context5.t0.message));\n              case 22:\n                common_gateway_react_1.logger.debug('error is not an instance of SendTransactionError, rethrowing', _context5.t0);\n                throw _context5.t0;\n              case 24:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[0, 16]]);\n      }));\n      function handleUserSignedTransaction(_x4) {\n        return _handleUserSignedTransaction.apply(this, arguments);\n      }\n      return handleUserSignedTransaction;\n    }(),\n    chainType: common_gateway_react_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: cluster\n      },\n      headers: {\n        'X-Civic-Client': version_1.VERSION\n      }\n    }\n  };\n};\nexports.chainImplementation = chainImplementation;\nvar useSolanaGateway = function useSolanaGateway() {\n  var _ref3 = (0, common_gateway_react_1.useGateway)(),\n    gatewayToken = _ref3.gatewayToken,\n    gatewayTokenTransaction = _ref3.gatewayTokenTransaction;\n  var solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  var solanaGatewayTokenTransaction = gatewayTokenTransaction ? (0, util_1.createSolanaTransactionFromBase64)(gatewayTokenTransaction) : undefined;\n  return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken,\n    gatewayTokenTransaction: solanaGatewayTokenTransaction\n  });\n};\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"names":["Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","common_gateway_react_1","web3_js_1","prove_solana_wallet_1","config_1","version_1","util_1","clusterUrl","cluster","publicKey","signTransaction","handleTransaction","gatekeeperNetworkAddress","stage","logger","debug","connection","Connection","requiresSignature","transaction","signatures","find","sig","equals","undefined","submitTransaction","sendRawTransaction","serialize","txSig","confirmTransaction","dAppHandlesTransactions","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","Promise","resolve","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","proveWalletOwnership","prove","makeConfig","result","toString","handleUserSignedTransaction","partiallySignedTx","createSolanaTransactionFromBase64","transactionToSend","SendTransactionError","message","parseSolanaErrorCode","ChainError","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","headers","VERSION","useGateway","gatewayTokenTransaction","solanaGatewayToken","solanaGatewayTokenTransaction","assign"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@civic/solana-gateway-react/dist/esm/chainImplementation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst common_gateway_react_1 = require(\"@civic/common-gateway-react\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst version_1 = require(\"./version\");\nconst util_1 = require(\"./util\");\nconst chainImplementation = ({ clusterUrl, cluster, publicKey, signTransaction, handleTransaction, gatekeeperNetworkAddress, stage, }) => {\n    common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    const requiresSignature = (transaction) => {\n        return transaction.signatures.find((sig) => sig.publicKey.equals(publicKey)) !== undefined;\n    };\n    const submitTransaction = async (transaction) => {\n        const txSig = await connection.sendRawTransaction(transaction.serialize());\n        // TODO re-enable when https://github.com/solana-labs/solana/issues/26198 is fixed\n        // const blockhash = await connection.getLatestBlockhash();\n        // await connection.confirmTransaction({ ...blockhash, signature: txSig });\n        await connection.confirmTransaction(txSig);\n    };\n    return {\n        dAppHandlesTransactions: !!handleTransaction,\n        addOnGatewayTokenChangeListener: async (gatewayToken, tokenDidChange) => {\n            return Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: common_gateway_react_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            }));\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: common_gateway_react_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n            return result.toString('base64');\n        },\n        handleUserSignedTransaction: async (partiallySignedTx) => {\n            try {\n                common_gateway_react_1.logger.debug('handleUserSignedTransaction, user-provided handleTransaction', !!handleTransaction);\n                const transaction = (0, util_1.createSolanaTransactionFromBase64)(partiallySignedTx);\n                if (handleTransaction) {\n                    await handleTransaction(transaction);\n                    return;\n                }\n                let transactionToSend = transaction;\n                if (requiresSignature(transaction)) {\n                    transactionToSend = await signTransaction(transaction);\n                }\n                await submitTransaction(transactionToSend);\n            }\n            catch (error) {\n                if (error instanceof web3_js_1.SendTransactionError) {\n                    common_gateway_react_1.logger.debug('error is instance of SendTransactionError', error);\n                    common_gateway_react_1.logger.debug(`parseSolanaErrorCode(${error.message}) = ${(0, util_1.parseSolanaErrorCode)(error.message)}`);\n                    throw new common_gateway_react_1.ChainError(error.message, (0, util_1.parseSolanaErrorCode)(error.message));\n                }\n                common_gateway_react_1.logger.debug('error is not an instance of SendTransactionError, rethrowing', error);\n                throw error;\n            }\n        },\n        chainType: common_gateway_react_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: cluster },\n            headers: { 'X-Civic-Client': version_1.VERSION },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken, gatewayTokenTransaction } = (0, common_gateway_react_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    const solanaGatewayTokenTransaction = gatewayTokenTransaction\n        ? (0, util_1.createSolanaTransactionFromBase64)(gatewayTokenTransaction)\n        : undefined;\n    return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), { gatewayToken: solanaGatewayToken, gatewayTokenTransaction: solanaGatewayTokenTransaction });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,mBAAmB,GAAG,KAAK,CAAC;AAC/D,IAAMC,mBAAmB,GAAGC,OAAO,CAAC,iCAAiC,CAAC;AACtE,IAAMC,sBAAsB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACrE,IAAME,SAAS,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC5C,IAAMG,qBAAqB,GAAGH,OAAO,CAAC,mCAAmC,CAAC;AAC1E,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAU,CAAC;AACpC,IAAMK,SAAS,GAAGL,OAAO,CAAC,WAAW,CAAC;AACtC,IAAMM,MAAM,GAAGN,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAMF,mBAAmB,GAAG,SAAtBA,mBAAmB,OAAiH;EAAA,IAA3GS,UAAU,QAAVA,UAAU;IAAEC,OAAO,QAAPA,OAAO;IAAEC,SAAS,QAATA,SAAS;IAAEC,eAAe,QAAfA,eAAe;IAAEC,iBAAiB,QAAjBA,iBAAiB;IAAEC,wBAAwB,QAAxBA,wBAAwB;IAAEC,KAAK,QAALA,KAAK;EAC9HZ,sBAAsB,CAACa,MAAM,CAACC,KAAK,CAAC,8CAA8C,EAAER,UAAU,CAAC;EAC/F,IAAMS,UAAU,GAAG,IAAId,SAAS,CAACe,UAAU,CAACV,UAAU,EAAE,WAAW,CAAC;EACpE,IAAMW,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,WAAW,EAAK;IACvC,OAAOA,WAAW,CAACC,UAAU,CAACC,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACb,SAAS,CAACc,MAAM,CAACd,SAAS,CAAC;IAAA,EAAC,KAAKe,SAAS;EAC9F,CAAC;EACD,IAAMC,iBAAiB;IAAA,uEAAG,iBAAON,WAAW;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACpBH,UAAU,CAACU,kBAAkB,CAACP,WAAW,CAACQ,SAAS,EAAE,CAAC;YAAA;cAApEC,KAAK;cAAA;cAAA,OAILZ,UAAU,CAACa,kBAAkB,CAACD,KAAK,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAC7C;IAAA,gBANKH,iBAAiB;MAAA;IAAA;EAAA,GAMtB;EACD,OAAO;IACHK,uBAAuB,EAAE,CAAC,CAACnB,iBAAiB;IAC5CoB,+BAA+B;MAAA,kGAAE,kBAAOC,YAAY,EAAEC,cAAc;QAAA;UAAA;YAAA;cAAA;gBAAA,kCACzDC,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,EAAEpC,mBAAmB,CAACqC,oBAAoB,EAAEpB,UAAU,EAAE,IAAId,SAAS,CAACmC,SAAS,CAACL,YAAY,CAACM,UAAU,CAAC,EAAE,UAACC,KAAK,EAAK;kBAC1IN,cAAc,CAAC;oBACXO,iBAAiB,EAAED,KAAK,CAACC,iBAAiB,CAACC,QAAQ,EAAE;oBACrD7B,wBAAwB,EAAE2B,KAAK,CAACG,iBAAiB,CAACD,QAAQ,EAAE;oBAC5DE,KAAK,EAAEJ,KAAK,CAACI,KAAK,CAACF,QAAQ,EAAE;oBAC7BG,KAAK,EAAE3C,sBAAsB,CAAC4C,KAAK,CAACN,KAAK,CAACK,KAAK,CAAC;oBAChDN,UAAU,EAAEC,KAAK,CAAC9B,SAAS,CAACgC,QAAQ,EAAE;oBACtCK,UAAU,EAAEP,KAAK,CAACO;kBACtB,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACN;MAAA;QAAA;MAAA;MAAA;IAAA;IACDC,kCAAkC,EAAE,4CAACC,UAAU,EAAK;MAChD,CAAC,CAAC,EAAEjD,mBAAmB,CAACkD,2BAA2B,EAAEjC,UAAU,EAAEgC,UAAU,CAAC;IAChF,CAAC;IACDE,gBAAgB;MAAA,mFAAE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACa,CAAC,CAAC,EAAEnD,mBAAmB,CAACmD,gBAAgB,EAAElC,UAAU,EAAEP,SAAS,EAAE,IAAIP,SAAS,CAACmC,SAAS,CAACzB,wBAAwB,CAAC,CAAC;cAAA;gBAAxIuC,YAAY;gBAAA,IACbA,YAAY;kBAAA;kBAAA;gBAAA;gBAAA,kCACN3B,SAAS;cAAA;gBAAA,kCACb;kBACHgB,iBAAiB,EAAEW,YAAY,CAACX,iBAAiB,CAACC,QAAQ,EAAE;kBAC5D7B,wBAAwB,EAAEuC,YAAY,CAACT,iBAAiB,CAACD,QAAQ,EAAE;kBACnEE,KAAK,EAAEQ,YAAY,CAACR,KAAK,CAACF,QAAQ,EAAE;kBACpCG,KAAK,EAAE3C,sBAAsB,CAAC4C,KAAK,CAACM,YAAY,CAACP,KAAK,CAAC;kBACvDN,UAAU,EAAEa,YAAY,CAAC1C,SAAS,CAACgC,QAAQ,EAAE;kBAC7CK,UAAU,EAAEK,YAAY,CAACL;gBAC7B,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACJ;MAAA;QAAA;MAAA;MAAA;IAAA;IACDM,oBAAoB;MAAA,uFAAE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACG,CAAC,CAAC,EAAEjD,qBAAqB,CAACkD,KAAK,EAAE5C,SAAS,EAAEC,eAAe,EAAE,CAAC,CAAC,EAAEN,QAAQ,CAACkD,UAAU,EAAE/C,UAAU,EAAEC,OAAO,CAAC,CAAC;cAAA;gBAA1H+C,MAAM;gBAAA,kCACLA,MAAM,CAACC,QAAQ,CAAC,QAAQ,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACnC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDC,2BAA2B;MAAA,8FAAE,kBAAOC,iBAAiB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAE7CzD,sBAAsB,CAACa,MAAM,CAACC,KAAK,CAAC,8DAA8D,EAAE,CAAC,CAACJ,iBAAiB,CAAC;gBAClHQ,WAAW,GAAG,CAAC,CAAC,EAAEb,MAAM,CAACqD,iCAAiC,EAAED,iBAAiB,CAAC;gBAAA,KAChF/C,iBAAiB;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACXA,iBAAiB,CAACQ,WAAW,CAAC;cAAA;gBAAA;cAAA;gBAGpCyC,iBAAiB,GAAGzC,WAAW;gBAAA,KAC/BD,iBAAiB,CAACC,WAAW,CAAC;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACJT,eAAe,CAACS,WAAW,CAAC;cAAA;gBAAtDyC,iBAAiB;cAAA;gBAAA;gBAAA,OAEfnC,iBAAiB,CAACmC,iBAAiB,CAAC;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA,MAGtC,wBAAiB1D,SAAS,CAAC2D,oBAAoB;kBAAA;kBAAA;gBAAA;gBAC/C5D,sBAAsB,CAACa,MAAM,CAACC,KAAK,CAAC,2CAA2C,eAAQ;gBACvFd,sBAAsB,CAACa,MAAM,CAACC,KAAK,gCAAyB,aAAM+C,OAAO,iBAAO,CAAC,CAAC,EAAExD,MAAM,CAACyD,oBAAoB,EAAE,aAAMD,OAAO,CAAC,EAAG;gBAAC,MAC7H,IAAI7D,sBAAsB,CAAC+D,UAAU,CAAC,aAAMF,OAAO,EAAE,CAAC,CAAC,EAAExD,MAAM,CAACyD,oBAAoB,EAAE,aAAMD,OAAO,CAAC,CAAC;cAAA;gBAE/G7D,sBAAsB,CAACa,MAAM,CAACC,KAAK,CAAC,8DAA8D,eAAQ;gBAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAGlH;MAAA;QAAA;MAAA;MAAA;IAAA;IACDkD,SAAS,EAAEhE,sBAAsB,CAACiE,SAAS,CAACC,MAAM;IAClDC,UAAU,EAAE;MACRC,OAAO,EAAE,CAAC,CAAC,EAAEjE,QAAQ,CAACkE,qBAAqB,EAAEzD,KAAK,CAAC;MACnD0D,WAAW,EAAE;QAAEC,OAAO,EAAEhE;MAAQ,CAAC;MACjCiE,OAAO,EAAE;QAAE,gBAAgB,EAAEpE,SAAS,CAACqE;MAAQ;IACnD;EACJ,CAAC;AACL,CAAC;AACD/E,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjD,IAAMD,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;EAC3B,YAAkD,CAAC,CAAC,EAAEI,sBAAsB,CAAC0E,UAAU,GAAG;IAAlF3C,YAAY,SAAZA,YAAY;IAAE4C,uBAAuB,SAAvBA,uBAAuB;EAC7C,IAAMC,kBAAkB,GAAG7C,YAAY,GACjC;IACEQ,iBAAiB,EAAE,IAAItC,SAAS,CAACmC,SAAS,CAACL,YAAY,CAACQ,iBAAiB,CAAC;IAC1E5B,wBAAwB,EAAE,IAAIV,SAAS,CAACmC,SAAS,CAACL,YAAY,CAACpB,wBAAwB,CAAC;IACxF+B,KAAK,EAAE,IAAIzC,SAAS,CAACmC,SAAS,CAACL,YAAY,CAACW,KAAK,CAAC;IAClDC,KAAK,EAAEZ,YAAY,CAACY,KAAK;IACzBnC,SAAS,EAAE,IAAIP,SAAS,CAACmC,SAAS,CAACL,YAAY,CAACM,UAAU,CAAC;IAC3DQ,UAAU,EAAEd,YAAY,CAACc;EAC7B,CAAC,GACCtB,SAAS;EACf,IAAMsD,6BAA6B,GAAGF,uBAAuB,GACvD,CAAC,CAAC,EAAEtE,MAAM,CAACqD,iCAAiC,EAAEiB,uBAAuB,CAAC,GACtEpD,SAAS;EACf,OAAO/B,MAAM,CAACsF,MAAM,CAACtF,MAAM,CAACsF,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE9E,sBAAsB,CAAC0E,UAAU,GAAG,CAAC,EAAE;IAAE3C,YAAY,EAAE6C,kBAAkB;IAAED,uBAAuB,EAAEE;EAA8B,CAAC,CAAC;AACnL,CAAC;AACDnF,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script"}