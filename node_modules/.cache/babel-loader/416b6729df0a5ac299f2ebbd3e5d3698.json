{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createClass = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _inherits = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeFeatureFromNetwork = exports.addFeatureToNetwork = exports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\nvar solanaBorsh_1 = require(\"./solanaBorsh\");\nvar constants_1 = require(\"./constants\");\nvar web3_js_1 = require(\"@solana/web3.js\");\nvar GatewayTokenData_1 = require(\"./GatewayTokenData\");\nvar GatewayNetworkData_1 = require(\"./GatewayNetworkData\");\nvar util_1 = require(\"./util\");\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\nvar AddGatekeeper = /*#__PURE__*/function (_solanaBorsh_1$Assign) {\n  _inherits(AddGatekeeper, _solanaBorsh_1$Assign);\n  var _super = _createSuper(AddGatekeeper);\n  function AddGatekeeper() {\n    _classCallCheck(this, AddGatekeeper);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AddGatekeeper);\n}(solanaBorsh_1.Assignable);\nvar IssueVanilla = /*#__PURE__*/function (_solanaBorsh_1$Assign2) {\n  _inherits(IssueVanilla, _solanaBorsh_1$Assign2);\n  var _super2 = _createSuper(IssueVanilla);\n  function IssueVanilla() {\n    _classCallCheck(this, IssueVanilla);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(IssueVanilla);\n}(solanaBorsh_1.Assignable);\nvar SetState = /*#__PURE__*/function (_solanaBorsh_1$Assign3) {\n  _inherits(SetState, _solanaBorsh_1$Assign3);\n  var _super3 = _createSuper(SetState);\n  function SetState() {\n    _classCallCheck(this, SetState);\n    return _super3.apply(this, arguments);\n  }\n  return _createClass(SetState);\n}(solanaBorsh_1.Assignable);\nvar UpdateExpiry = /*#__PURE__*/function (_solanaBorsh_1$Assign4) {\n  _inherits(UpdateExpiry, _solanaBorsh_1$Assign4);\n  var _super4 = _createSuper(UpdateExpiry);\n  function UpdateExpiry() {\n    _classCallCheck(this, UpdateExpiry);\n    return _super4.apply(this, arguments);\n  }\n  return _createClass(UpdateExpiry);\n}(solanaBorsh_1.Assignable);\nvar RevokeGatekeeper = /*#__PURE__*/function (_solanaBorsh_1$Assign5) {\n  _inherits(RevokeGatekeeper, _solanaBorsh_1$Assign5);\n  var _super5 = _createSuper(RevokeGatekeeper);\n  function RevokeGatekeeper() {\n    _classCallCheck(this, RevokeGatekeeper);\n    return _super5.apply(this, arguments);\n  }\n  return _createClass(RevokeGatekeeper);\n}(solanaBorsh_1.Assignable);\nvar AddFeatureToNetwork = /*#__PURE__*/function (_solanaBorsh_1$Assign6) {\n  _inherits(AddFeatureToNetwork, _solanaBorsh_1$Assign6);\n  var _super6 = _createSuper(AddFeatureToNetwork);\n  function AddFeatureToNetwork() {\n    _classCallCheck(this, AddFeatureToNetwork);\n    return _super6.apply(this, arguments);\n  }\n  return _createClass(AddFeatureToNetwork);\n}(solanaBorsh_1.Assignable);\nvar RemoveFeatureFromNetwork = /*#__PURE__*/function (_solanaBorsh_1$Assign7) {\n  _inherits(RemoveFeatureFromNetwork, _solanaBorsh_1$Assign7);\n  var _super7 = _createSuper(RemoveFeatureFromNetwork);\n  function RemoveFeatureFromNetwork() {\n    _classCallCheck(this, RemoveFeatureFromNetwork);\n    return _super7.apply(this, arguments);\n  }\n  return _createClass(RemoveFeatureFromNetwork);\n}(solanaBorsh_1.Assignable);\nvar GatewayInstruction = /*#__PURE__*/function (_solanaBorsh_1$Enum) {\n  _inherits(GatewayInstruction, _solanaBorsh_1$Enum);\n  var _super8 = _createSuper(GatewayInstruction);\n  function GatewayInstruction() {\n    _classCallCheck(this, GatewayInstruction);\n    return _super8.apply(this, arguments);\n  }\n  _createClass(GatewayInstruction, null, [{\n    key: \"addGatekeeper\",\n    value: function addGatekeeper() {\n      return new GatewayInstruction({\n        addGatekeeper: new AddGatekeeper({})\n      });\n    }\n  }, {\n    key: \"issueVanilla\",\n    value: function issueVanilla(seed, expireTime) {\n      return new GatewayInstruction({\n        issueVanilla: new IssueVanilla({\n          seed: seed,\n          expireTime: expireTime\n        })\n      });\n    }\n  }, {\n    key: \"revoke\",\n    value: function revoke() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            revoked: new GatewayTokenData_1.Revoked({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            frozen: new GatewayTokenData_1.Frozen({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            active: new GatewayTokenData_1.Active({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"updateExpiry\",\n    value: function updateExpiry(expireTime) {\n      return new GatewayInstruction({\n        updateExpiry: new UpdateExpiry({\n          expireTime: expireTime\n        })\n      });\n    }\n  }, {\n    key: \"revokeGatekeeper\",\n    value: function revokeGatekeeper() {\n      return new GatewayInstruction({\n        revokeGatekeeper: new RevokeGatekeeper({})\n      });\n    }\n  }, {\n    key: \"addFeatureToNetwork\",\n    value: function addFeatureToNetwork(feature) {\n      return new GatewayInstruction({\n        addFeatureToNetwork: new AddFeatureToNetwork({\n          feature: feature\n        })\n      });\n    }\n  }, {\n    key: \"removeFeatureFromNetwork\",\n    value: function removeFeatureFromNetwork(feature) {\n      return new GatewayInstruction({\n        removeFeatureFromNetwork: new RemoveFeatureFromNetwork({\n          feature: feature\n        })\n      });\n    }\n  }]);\n  return GatewayInstruction;\n}(solanaBorsh_1.Enum);\nexports.GatewayInstruction = GatewayInstruction;\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.addGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\nexports.addGatekeeper = addGatekeeper;\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n  var keys = [{\n    pubkey: funds_to,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.revokeGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenAddressForOwnerAndGatekeeperNetwork\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperNetwork,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\nexports.issueVanilla = issueVanilla;\nvar getStateChangeAccountMeta = function getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  return [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n};\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.revoke().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\nexports.revoke = revoke;\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.freeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\nexports.freeze = freeze;\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.unfreeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\nexports.unfreeze = unfreeze;\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n  var keys = [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.updateExpiry(expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\nexports.updateExpiry = updateExpiry;\n/**\n * Add a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\nfunction addFeatureToNetwork(payer, network, feature) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var featureAccount, keys, data;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, util_1.getFeatureAccountAddress)(feature, network);\n          case 2:\n            featureAccount = _context.sent;\n            keys = [{\n              pubkey: payer,\n              isSigner: true,\n              isWritable: true\n            }, {\n              pubkey: network,\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: featureAccount,\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: web3_js_1.SystemProgram.programId,\n              isSigner: false,\n              isWritable: false\n            }];\n            data = GatewayInstruction.addFeatureToNetwork(feature).encode();\n            return _context.abrupt(\"return\", new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: constants_1.PROGRAM_ID,\n              data: data\n            }));\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexports.addFeatureToNetwork = addFeatureToNetwork;\n/**\n * Remove a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\nfunction removeFeatureFromNetwork(payer, network, feature) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var featureAccount, keys, data;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return (0, util_1.getFeatureAccountAddress)(feature, network);\n          case 2:\n            featureAccount = _context2.sent;\n            keys = [{\n              pubkey: payer,\n              isSigner: true,\n              isWritable: true\n            }, {\n              pubkey: network,\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: featureAccount,\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: web3_js_1.SystemProgram.programId,\n              isSigner: false,\n              isWritable: false\n            }];\n            data = GatewayInstruction.removeFeatureFromNetwork(feature).encode();\n            return _context2.abrupt(\"return\", new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: constants_1.PROGRAM_ID,\n              data: data\n            }));\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nexports.removeFeatureFromNetwork = removeFeatureFromNetwork;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n  kind: \"enum\",\n  field: \"enum\",\n  values: [[\"addGatekeeper\", AddGatekeeper], [\"issueVanilla\", IssueVanilla], [\"setState\", SetState], [\"updateExpiry\", UpdateExpiry], [\"revokeGatekeeper\", RevokeGatekeeper], [\"addFeatureToNetwork\", AddFeatureToNetwork], [\"removeFeatureFromNetwork\", RemoveFeatureFromNetwork]]\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n  kind: \"struct\",\n  fields: [[\"seed\", {\n    kind: \"option\",\n    type: [8]\n  }], [\"expireTime\", {\n    kind: \"option\",\n    type: \"u64\"\n  }]]\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n  kind: \"struct\",\n  fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]]\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n  kind: \"struct\",\n  fields: [[\"expireTime\", \"u64\"]]\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});\nsolanaBorsh_1.SCHEMA.set(AddFeatureToNetwork, {\n  kind: \"struct\",\n  fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]]\n});\nsolanaBorsh_1.SCHEMA.set(RemoveFeatureFromNetwork, {\n  kind: \"struct\",\n  fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]]\n});","map":{"version":3,"sources":["../../src/lib/instruction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeFeatureFromNetwork = exports.addFeatureToNetwork = exports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\nconst solanaBorsh_1 = require(\"./solanaBorsh\");\nconst constants_1 = require(\"./constants\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\nconst GatewayNetworkData_1 = require(\"./GatewayNetworkData\");\nconst util_1 = require(\"./util\");\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\nclass AddGatekeeper extends solanaBorsh_1.Assignable {\n}\nclass IssueVanilla extends solanaBorsh_1.Assignable {\n}\nclass SetState extends solanaBorsh_1.Assignable {\n}\nclass UpdateExpiry extends solanaBorsh_1.Assignable {\n}\nclass RevokeGatekeeper extends solanaBorsh_1.Assignable {\n}\nclass AddFeatureToNetwork extends solanaBorsh_1.Assignable {\n}\nclass RemoveFeatureFromNetwork extends solanaBorsh_1.Assignable {\n}\nclass GatewayInstruction extends solanaBorsh_1.Enum {\n    static addGatekeeper() {\n        return new GatewayInstruction({\n            addGatekeeper: new AddGatekeeper({}),\n        });\n    }\n    static issueVanilla(seed, expireTime) {\n        return new GatewayInstruction({\n            issueVanilla: new IssueVanilla({ seed, expireTime }),\n        });\n    }\n    static revoke() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ revoked: new GatewayTokenData_1.Revoked({}) }),\n            }),\n        });\n    }\n    static freeze() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ frozen: new GatewayTokenData_1.Frozen({}) }),\n            }),\n        });\n    }\n    static unfreeze() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ active: new GatewayTokenData_1.Active({}) }),\n            }),\n        });\n    }\n    static updateExpiry(expireTime) {\n        return new GatewayInstruction({\n            updateExpiry: new UpdateExpiry({\n                expireTime,\n            }),\n        });\n    }\n    static revokeGatekeeper() {\n        return new GatewayInstruction({\n            revokeGatekeeper: new RevokeGatekeeper({}),\n        });\n    }\n    static addFeatureToNetwork(feature) {\n        return new GatewayInstruction({\n            addFeatureToNetwork: new AddFeatureToNetwork({\n                feature,\n            }),\n        });\n    }\n    static removeFeatureFromNetwork(feature) {\n        return new GatewayInstruction({\n            removeFeatureFromNetwork: new RemoveFeatureFromNetwork({\n                feature,\n            }),\n        });\n    }\n}\nexports.GatewayInstruction = GatewayInstruction;\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n        { pubkey: network, isSigner: true, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.addGatekeeper().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.addGatekeeper = addGatekeeper;\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n    const keys = [\n        { pubkey: funds_to, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n        { pubkey: network, isSigner: true, isWritable: false },\n    ];\n    const data = GatewayInstruction.revokeGatekeeper().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenAddressForOwnerAndGatekeeperNetwork\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n        { pubkey: gatekeeperNetwork, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.issueVanilla = issueVanilla;\nconst getStateChangeAccountMeta = (gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) => [\n    { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n];\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.revoke().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.revoke = revoke;\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.freeze().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.freeze = freeze;\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.unfreeze().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.unfreeze = unfreeze;\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n    const keys = [\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.updateExpiry(expireTime).encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.updateExpiry = updateExpiry;\n/**\n * Add a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\nfunction addFeatureToNetwork(payer, network, feature) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const featureAccount = yield (0, util_1.getFeatureAccountAddress)(feature, network);\n        const keys = [\n            { pubkey: payer, isSigner: true, isWritable: true },\n            { pubkey: network, isSigner: true, isWritable: false },\n            { pubkey: featureAccount, isSigner: false, isWritable: true },\n            { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n        ];\n        const data = GatewayInstruction.addFeatureToNetwork(feature).encode();\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: constants_1.PROGRAM_ID,\n            data,\n        });\n    });\n}\nexports.addFeatureToNetwork = addFeatureToNetwork;\n/**\n * Remove a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\nfunction removeFeatureFromNetwork(payer, network, feature) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const featureAccount = yield (0, util_1.getFeatureAccountAddress)(feature, network);\n        const keys = [\n            { pubkey: payer, isSigner: true, isWritable: true },\n            { pubkey: network, isSigner: true, isWritable: false },\n            { pubkey: featureAccount, isSigner: false, isWritable: true },\n            { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n        ];\n        const data = GatewayInstruction.removeFeatureFromNetwork(feature).encode();\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: constants_1.PROGRAM_ID,\n            data,\n        });\n    });\n}\nexports.removeFeatureFromNetwork = removeFeatureFromNetwork;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n    kind: \"enum\",\n    field: \"enum\",\n    values: [\n        [\"addGatekeeper\", AddGatekeeper],\n        [\"issueVanilla\", IssueVanilla],\n        [\"setState\", SetState],\n        [\"updateExpiry\", UpdateExpiry],\n        [\"revokeGatekeeper\", RevokeGatekeeper],\n        [\"addFeatureToNetwork\", AddFeatureToNetwork],\n        [\"removeFeatureFromNetwork\", RemoveFeatureFromNetwork],\n    ],\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n    kind: \"struct\",\n    fields: [],\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n    kind: \"struct\",\n    fields: [\n        [\"seed\", { kind: \"option\", type: [8] }],\n        [\"expireTime\", { kind: \"option\", type: \"u64\" }],\n    ],\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n    kind: \"struct\",\n    fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]],\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n    kind: \"struct\",\n    fields: [[\"expireTime\", \"u64\"]],\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n    kind: \"struct\",\n    fields: [],\n});\nsolanaBorsh_1.SCHEMA.set(AddFeatureToNetwork, {\n    kind: \"struct\",\n    fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]],\n});\nsolanaBorsh_1.SCHEMA.set(RemoveFeatureFromNetwork, {\n    kind: \"struct\",\n    fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]],\n});\n//# sourceMappingURL=instruction.js.map"]},"metadata":{},"sourceType":"script"}