{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { PublicKey } from '@solana/web3.js';\nexport function getDerivationPath(account, change) {\n  var length = account !== undefined ? change === undefined ? 3 : 4 : 2;\n  var derivationPath = Buffer.alloc(1 + length * 4);\n  var offset = derivationPath.writeUInt8(length, 0);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n  if (account !== undefined) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n    if (change !== undefined) {\n      derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n  return derivationPath;\n}\nvar BIP32_HARDENED_BIT = 1 << 31 >>> 0;\nfunction harden(n) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\nvar INS_GET_PUBKEY = 0x05;\nvar INS_SIGN_MESSAGE = 0x06;\nvar P1_NON_CONFIRM = 0x00;\nvar P1_CONFIRM = 0x01;\nvar P2_EXTEND = 0x01;\nvar P2_MORE = 0x02;\nvar MAX_PAYLOAD = 255;\nvar LEDGER_CLA = 0xe0;\nexport function getPublicKey(transport, derivationPath) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var bytes;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n          case 2:\n            bytes = _context.sent;\n            return _context.abrupt(\"return\", new PublicKey(bytes));\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexport function signTransaction(transport, transaction, derivationPath) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var paths, message, data;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            paths = Buffer.alloc(1);\n            paths.writeUInt8(1, 0);\n            message = transaction.serializeMessage();\n            data = Buffer.concat([paths, derivationPath, message]);\n            _context2.next = 6;\n            return send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nfunction send(transport, instruction, p1, data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var p2, offset, _buffer, _response, buffer, response;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            p2 = 0;\n            offset = 0;\n            if (!(data.length > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n          case 3:\n            if (!(data.length - offset > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n            _buffer = data.slice(offset, offset + MAX_PAYLOAD);\n            _context3.next = 7;\n            return transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, _buffer);\n          case 7:\n            _response = _context3.sent;\n            if (!(_response.length !== 2)) {\n              _context3.next = 10;\n              break;\n            }\n            throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n          case 10:\n            p2 |= P2_EXTEND;\n            offset += MAX_PAYLOAD;\n            _context3.next = 3;\n            break;\n          case 14:\n            buffer = data.slice(offset);\n            _context3.next = 17;\n            return transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n          case 17:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.slice(0, response.length - 2));\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}","map":{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { PublicKey } from '@solana/web3.js';\nexport function getDerivationPath(account, change) {\n    const length = account !== undefined ? (change === undefined ? 3 : 4) : 2;\n    const derivationPath = Buffer.alloc(1 + length * 4);\n    let offset = derivationPath.writeUInt8(length, 0);\n    offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n    offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n    if (account !== undefined) {\n        offset = derivationPath.writeUInt32BE(harden(account), offset);\n        if (change !== undefined) {\n            derivationPath.writeUInt32BE(harden(change), offset);\n        }\n    }\n    return derivationPath;\n}\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction harden(n) {\n    return (n | BIP32_HARDENED_BIT) >>> 0;\n}\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\nconst MAX_PAYLOAD = 255;\nconst LEDGER_CLA = 0xe0;\nexport function getPublicKey(transport, derivationPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const bytes = yield send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n        return new PublicKey(bytes);\n    });\n}\nexport function signTransaction(transport, transaction, derivationPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const paths = Buffer.alloc(1);\n        paths.writeUInt8(1, 0);\n        const message = transaction.serializeMessage();\n        const data = Buffer.concat([paths, derivationPath, message]);\n        return yield send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n    });\n}\nfunction send(transport, instruction, p1, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let p2 = 0;\n        let offset = 0;\n        if (data.length > MAX_PAYLOAD) {\n            while (data.length - offset > MAX_PAYLOAD) {\n                const buffer = data.slice(offset, offset + MAX_PAYLOAD);\n                const response = yield transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, buffer);\n                // @ts-ignore\n                if (response.length !== 2)\n                    throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n                p2 |= P2_EXTEND;\n                offset += MAX_PAYLOAD;\n            }\n        }\n        const buffer = data.slice(offset);\n        const response = yield transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n        return response.slice(0, response.length - 2);\n    });\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}