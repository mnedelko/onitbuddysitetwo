{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AssignablePublicKey = void 0;\nvar solanaBorsh_1 = require(\"./solanaBorsh\");\nvar web3_js_1 = require(\"@solana/web3.js\");\n/**\n * A Borsh-compatible public key object\n *\n * The pattern for these objects is to have their properties dynamically\n * assigned by borsh.decode, as opposed to via a constructor.\n *\n * The imperative assignment operator (!) is used to avoid Typescript\n * complaining about the above.\n */\nvar AssignablePublicKey = /*#__PURE__*/function (_solanaBorsh_1$Assign) {\n  _inherits(AssignablePublicKey, _solanaBorsh_1$Assign);\n  var _super = _createSuper(AssignablePublicKey);\n  function AssignablePublicKey() {\n    _classCallCheck(this, AssignablePublicKey);\n    return _super.apply(this, arguments);\n  }\n  _createClass(AssignablePublicKey, [{\n    key: \"toPublicKey\",\n    value: function toPublicKey() {\n      return new web3_js_1.PublicKey(this.bytes);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toPublicKey().toBase58();\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(pubkey) {\n      return AssignablePublicKey.fromPublicKey(new web3_js_1.PublicKey(pubkey));\n    }\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(publicKey) {\n      return new AssignablePublicKey({\n        bytes: Uint8Array.from(publicKey.toBuffer())\n      });\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      var bytes = new Array(32);\n      bytes.fill(0);\n      return new AssignablePublicKey({\n        bytes: bytes\n      });\n    }\n  }]);\n  return AssignablePublicKey;\n}(solanaBorsh_1.Assignable);\nexports.AssignablePublicKey = AssignablePublicKey;\nsolanaBorsh_1.SCHEMA.set(AssignablePublicKey, {\n  kind: \"struct\",\n  fields: [[\"bytes\", [32]]]\n});","map":{"version":3,"sources":["../../src/lib/AssignablePublicKey.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA;;;;;;;;AAQG;AARH,IASa,mBAAoB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAI/B,uBAAW;MACT,OAAO,IAAI,SAAA,CAAA,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;IAClC;EAAC;IAAA;IAAA,OAED,oBAAQ;MACN,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE;IACtC;EAAC;IAAA;IAAA,OAED,eAAa,MAAc,EAAA;MACzB,OAAO,mBAAmB,CAAC,aAAa,CAAC,IAAI,SAAA,CAAA,SAAS,CAAC,MAAM,CAAC,CAAC;IACjE;EAAC;IAAA;IAAA,OAED,uBAAqB,SAAoB,EAAA;MACvC,OAAO,IAAI,mBAAmB,CAAC;QAC7B,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;OAC5C,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,iBAAY;MACV,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC;MAC3B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;MACb,OAAO,IAAI,mBAAmB,CAAC;QAAE,KAAK,EAAL;MAAK,CAAE,CAAC;IAC3C;EAAC;EAAA;AAAA,EA1BsC,aAAA,CAAA,UAAU;AAAnD,OAAA,CAAA,mBAAA,GAAA,mBAAA;AA6BA,aAAA,CAAA,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE;EAC9B,IAAI,EAAE,QAAQ;EACd,MAAM,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;CACzB,CAAC","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AssignablePublicKey = void 0;\nconst solanaBorsh_1 = require(\"./solanaBorsh\");\nconst web3_js_1 = require(\"@solana/web3.js\");\n/**\n * A Borsh-compatible public key object\n *\n * The pattern for these objects is to have their properties dynamically\n * assigned by borsh.decode, as opposed to via a constructor.\n *\n * The imperative assignment operator (!) is used to avoid Typescript\n * complaining about the above.\n */\nclass AssignablePublicKey extends solanaBorsh_1.Assignable {\n    toPublicKey() {\n        return new web3_js_1.PublicKey(this.bytes);\n    }\n    toString() {\n        return this.toPublicKey().toBase58();\n    }\n    static parse(pubkey) {\n        return AssignablePublicKey.fromPublicKey(new web3_js_1.PublicKey(pubkey));\n    }\n    static fromPublicKey(publicKey) {\n        return new AssignablePublicKey({\n            bytes: Uint8Array.from(publicKey.toBuffer()),\n        });\n    }\n    static empty() {\n        const bytes = new Array(32);\n        bytes.fill(0);\n        return new AssignablePublicKey({ bytes });\n    }\n}\nexports.AssignablePublicKey = AssignablePublicKey;\nsolanaBorsh_1.SCHEMA.set(AssignablePublicKey, {\n    kind: \"struct\",\n    fields: [[\"bytes\", [32]]],\n});\n//# sourceMappingURL=AssignablePublicKey.js.map"]},"metadata":{},"sourceType":"script"}