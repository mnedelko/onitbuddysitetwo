{"ast":null,"code":"var id = 0;\nvar subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport var log = function log(type, message, data) {\n  var obj = {\n    type: type,\n    id: String(++id),\n    date: new Date()\n  };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport var listen = function listen(cb) {\n  subscribers.push(cb);\n  return function () {\n    var i = subscribers.indexOf(cb);\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\nfunction dispatch(log) {\n  for (var i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAcA,IAAI,EAAE,GAAG,CAAC;AACV,IAAM,WAAW,GAAiB,EAAE;AAEpC;;;;AAIG;AACH,OAAO,IAAM,GAAG,GAAG,SAAN,GAAG,CAAI,IAAY,EAAE,OAAgB,EAAE,IAAU,EAAA;EAC5D,IAAM,GAAG,GAAQ;IACf,IAAI,EAAA,IAAA;IACJ,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;IAChB,IAAI,EAAE,IAAI,IAAI;GACf;EACD,IAAI,OAAO,EAAE,GAAG,CAAC,OAAO,GAAG,OAAO;EAClC,IAAI,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI;EACzB,QAAQ,CAAC,GAAG,CAAC;AACf,CAAC;AAED;;;;AAIG;AACH,OAAO,IAAM,MAAM,GAAG,SAAT,MAAM,CAAI,EAAc,EAAA;EACnC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;EACpB,OAAO,YAAA;IACL,IAAM,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;IAEjC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACZ;MACA,WAAW,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;MACpD,WAAW,CAAC,GAAG,EAAE;IAClB;EACH,CAAC;AACH,CAAC;AAED,SAAS,QAAQ,CAAC,GAAQ,EAAA;EACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC3C,IAAI;MACF,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;KACpB,CAAC,OAAO,CAAC,EAAE;MACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IACjB;EACF;AACH;AAUA,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;EACjC,MAAM,CAAC,kBAAkB,GAAG,MAAM;AACnC","sourceRoot":"","sourcesContent":["var id = 0;\nvar subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport var log = function (type, message, data) {\n    var obj = {\n        type: type,\n        id: String(++id),\n        date: new Date()\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport var listen = function (cb) {\n    subscribers.push(cb);\n    return function () {\n        var i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for (var i = 0; i < subscribers.length; i++) {\n        try {\n            subscribers[i](log);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (typeof window !== \"undefined\") {\n    window.__ledgerLogsListen = listen;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}