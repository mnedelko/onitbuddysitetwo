{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"@project-serum/borsh\";\n// Deterministic IDL address as a function of the program id.\nexport function idlAddress(_x) {\n  return _idlAddress.apply(this, arguments);\n}\n// Seed for generating the idlAddress.\nfunction _idlAddress() {\n  _idlAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(programId) {\n    var base;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return PublicKey.findProgramAddress([], programId);\n          case 2:\n            base = _context.sent[0];\n            _context.next = 5;\n            return PublicKey.createWithSeed(base, seed(), programId);\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _idlAddress.apply(this, arguments);\n}\nexport function seed() {\n  return \"anchor:idl\";\n}\nvar IDL_ACCOUNT_LAYOUT = borsh.struct([borsh.publicKey(\"authority\"), borsh.vecU8(\"data\")]);\nexport function decodeIdlAccount(data) {\n  return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nexport function encodeIdlAccount(acc) {\n  var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  var len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n  return buffer.slice(0, len);\n}","map":{"version":3,"sources":["../../src/idl.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAS,QAAQ,iBAAiB;AAC3C,OAAO,KAAK,KAAK,MAAM,sBAAsB;AAsH7C;AACA,gBAAsB,UAAU;EAAA;AAAA;AAKhC;AAAA;EAAA,yEALO,iBAA0B,SAAoB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAC/B,SAAS,CAAC,kBAAkB,CAAC,EAAE,EAAE,SAAS,CAAC;UAAA;YAAzD,IAAI,iBAAuD,CAAC;YAAA;YAAA,OACrD,SAAS,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,SAAS,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC/D;EAAA;AAAA;AAGD,OAAM,SAAU,IAAI,GAAA;EAClB,OAAO,YAAY;AACrB;AAQA,IAAM,kBAAkB,GAAoC,KAAK,CAAC,MAAM,CAAC,CACvE,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,EAC5B,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CACpB,CAAC;AAEF,OAAM,SAAU,gBAAgB,CAAC,IAAY,EAAA;EAC3C,OAAO,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC;AACxC;AAEA,OAAM,SAAU,gBAAgB,CAAC,GAAsB,EAAA;EACrD,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;EACnC,IAAM,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC;EAClD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;AAC7B","sourceRoot":"","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"@project-serum/borsh\";\n// Deterministic IDL address as a function of the program id.\nexport async function idlAddress(programId) {\n    const base = (await PublicKey.findProgramAddress([], programId))[0];\n    return await PublicKey.createWithSeed(base, seed(), programId);\n}\n// Seed for generating the idlAddress.\nexport function seed() {\n    return \"anchor:idl\";\n}\nconst IDL_ACCOUNT_LAYOUT = borsh.struct([\n    borsh.publicKey(\"authority\"),\n    borsh.vecU8(\"data\"),\n]);\nexport function decodeIdlAccount(data) {\n    return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nexport function encodeIdlAccount(acc) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n    return buffer.slice(0, len);\n}\n//# sourceMappingURL=idl.js.map"]},"metadata":{},"sourceType":"module"}