{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { isBrowser } from \"./utils/common\";\nvar _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\nvar workspace = new Proxy({}, {\n  get: function get(workspaceCache, programName) {\n    if (isBrowser) {\n      console.log(\"Workspaces aren't available in the browser\");\n      return undefined;\n    }\n    var fs = require(\"fs\");\n    var process = require(\"process\");\n    if (!_populatedWorkspace) {\n      var path = require(\"path\");\n      var projectRoot = process.cwd();\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        var parentDir = path.dirname(projectRoot);\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n        projectRoot = parentDir;\n      }\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root.\");\n      }\n      var idlFolder = \"\".concat(projectRoot, \"/target/idl\");\n      if (!fs.existsSync(idlFolder)) {\n        throw new Error(\"\".concat(idlFolder, \" doesn't exist. Did you use \\\"anchor build\\\"?\"));\n      }\n      var idlMap = new Map();\n      fs.readdirSync(idlFolder).forEach(function (file) {\n        var filePath = \"\".concat(idlFolder, \"/\").concat(file);\n        var idlStr = fs.readFileSync(filePath);\n        var idl = JSON.parse(idlStr);\n        idlMap.set(idl.name, idl);\n        var name = camelCase(idl.name, {\n          pascalCase: true\n        });\n        if (idl.metadata && idl.metadata.address) {\n          workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));\n        }\n      });\n      // Override the workspace programs if the user put them in the config.\n      var anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n      var clusterId = anchorToml.provider.cluster;\n      if (anchorToml.programs && anchorToml.programs[clusterId]) {\n        attachWorkspaceOverride(workspaceCache, anchorToml.programs[clusterId], idlMap);\n      }\n      _populatedWorkspace = true;\n    }\n    return workspaceCache[programName];\n  }\n});\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n  Object.keys(overrideConfig).forEach(function (programName) {\n    var wsProgramName = camelCase(programName, {\n      pascalCase: true\n    });\n    var entry = overrideConfig[programName];\n    var overrideAddress = new PublicKey(typeof entry === \"string\" ? entry : entry.address);\n    var idl = idlMap.get(programName);\n    if (typeof entry !== \"string\" && entry.idl) {\n      idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n    }\n    workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n  });\n}\nexport default workspace;","map":{"version":3,"sources":["../../src/workspace.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { isBrowser } from \"./utils/common\";\nlet _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\nconst workspace = new Proxy({}, {\n    get(workspaceCache, programName) {\n        if (isBrowser) {\n            console.log(\"Workspaces aren't available in the browser\");\n            return undefined;\n        }\n        const fs = require(\"fs\");\n        const process = require(\"process\");\n        if (!_populatedWorkspace) {\n            const path = require(\"path\");\n            let projectRoot = process.cwd();\n            while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n                const parentDir = path.dirname(projectRoot);\n                if (parentDir === projectRoot) {\n                    projectRoot = undefined;\n                }\n                projectRoot = parentDir;\n            }\n            if (projectRoot === undefined) {\n                throw new Error(\"Could not find workspace root.\");\n            }\n            const idlFolder = `${projectRoot}/target/idl`;\n            if (!fs.existsSync(idlFolder)) {\n                throw new Error(`${idlFolder} doesn't exist. Did you use \"anchor build\"?`);\n            }\n            const idlMap = new Map();\n            fs.readdirSync(idlFolder).forEach((file) => {\n                const filePath = `${idlFolder}/${file}`;\n                const idlStr = fs.readFileSync(filePath);\n                const idl = JSON.parse(idlStr);\n                idlMap.set(idl.name, idl);\n                const name = camelCase(idl.name, { pascalCase: true });\n                if (idl.metadata && idl.metadata.address) {\n                    workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));\n                }\n            });\n            // Override the workspace programs if the user put them in the config.\n            const anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n            const clusterId = anchorToml.provider.cluster;\n            if (anchorToml.programs && anchorToml.programs[clusterId]) {\n                attachWorkspaceOverride(workspaceCache, anchorToml.programs[clusterId], idlMap);\n            }\n            _populatedWorkspace = true;\n        }\n        return workspaceCache[programName];\n    },\n});\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n    Object.keys(overrideConfig).forEach((programName) => {\n        const wsProgramName = camelCase(programName, { pascalCase: true });\n        const entry = overrideConfig[programName];\n        const overrideAddress = new PublicKey(typeof entry === \"string\" ? entry : entry.address);\n        let idl = idlMap.get(programName);\n        if (typeof entry !== \"string\" && entry.idl) {\n            idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n        }\n        workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n    });\n}\nexport default workspace;\n//# sourceMappingURL=workspace.js.map"]},"metadata":{},"sourceType":"module"}