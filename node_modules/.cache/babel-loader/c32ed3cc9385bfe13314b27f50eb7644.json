{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nvar _0n = BigInt(0);\nvar _1n = BigInt(1);\nvar _2n = BigInt(2);\nvar CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nvar CURVE = Object.freeze({\n  a: BigInt(-1),\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n  l: CU_O,\n  n: CU_O,\n  h: BigInt(8),\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960')\n});\nexport { CURVE };\nvar POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nvar SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nvar SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nvar SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nvar INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nvar ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nvar D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nvar ExtendedPoint = /*#__PURE__*/function () {\n  function ExtendedPoint(x, y, z, t) {\n    _classCallCheck(this, ExtendedPoint);\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.t = t;\n  }\n  _createClass(ExtendedPoint, [{\n    key: \"equals\",\n    value: function equals(other) {\n      assertExtPoint(other);\n      var X1 = this.x,\n        Y1 = this.y,\n        Z1 = this.z;\n      var X2 = other.x,\n        Y2 = other.y,\n        Z2 = other.z;\n      var X1Z2 = mod(X1 * Z2);\n      var X2Z1 = mod(X2 * Z1);\n      var Y1Z2 = mod(Y1 * Z2);\n      var Y2Z1 = mod(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n  }, {\n    key: \"double\",\n    value: function double() {\n      var X1 = this.x,\n        Y1 = this.y,\n        Z1 = this.z;\n      var a = CURVE.a;\n      var A = mod(X1 * X1);\n      var B = mod(Y1 * Y1);\n      var C = mod(_2n * mod(Z1 * Z1));\n      var D = mod(a * A);\n      var x1y1 = X1 + Y1;\n      var E = mod(mod(x1y1 * x1y1) - A - B);\n      var G = D + B;\n      var F = G - C;\n      var H = D - B;\n      var X3 = mod(E * F);\n      var Y3 = mod(G * H);\n      var T3 = mod(E * H);\n      var Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      assertExtPoint(other);\n      var X1 = this.x,\n        Y1 = this.y,\n        Z1 = this.z,\n        T1 = this.t;\n      var X2 = other.x,\n        Y2 = other.y,\n        Z2 = other.z,\n        T2 = other.t;\n      var A = mod((Y1 - X1) * (Y2 + X2));\n      var B = mod((Y1 + X1) * (Y2 - X2));\n      var F = mod(B - A);\n      if (F === _0n) return this.double();\n      var C = mod(Z1 * _2n * T2);\n      var D = mod(T1 * _2n * Z2);\n      var E = D + C;\n      var G = B + A;\n      var H = D - C;\n      var X3 = mod(E * F);\n      var Y3 = mod(G * H);\n      var T3 = mod(E * H);\n      var Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return this.add(other.negate());\n    }\n  }, {\n    key: \"precomputeWindow\",\n    value: function precomputeWindow(W) {\n      var windows = 1 + 256 / W;\n      var points = [];\n      var p = this;\n      var base = p;\n      for (var window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        for (var i = 1; i < Math.pow(2, W - 1); i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    }\n  }, {\n    key: \"wNAF\",\n    value: function wNAF(n, affinePoint) {\n      if (!affinePoint && this.equals(ExtendedPoint.BASE)) affinePoint = Point.BASE;\n      var W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n      if (256 % W) {\n        throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n      }\n      var precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n      if (!precomputes) {\n        precomputes = this.precomputeWindow(W);\n        if (affinePoint && W !== 1) {\n          precomputes = ExtendedPoint.normalizeZ(precomputes);\n          pointPrecomputes.set(affinePoint, precomputes);\n        }\n      }\n      var p = ExtendedPoint.ZERO;\n      var f = ExtendedPoint.ZERO;\n      var windows = 1 + 256 / W;\n      var windowSize = Math.pow(2, W - 1);\n      var mask = BigInt(Math.pow(2, W) - 1);\n      var maxNumber = Math.pow(2, W);\n      var shiftBy = BigInt(W);\n      for (var window = 0; window < windows; window++) {\n        var offset = window * windowSize;\n        var wbits = Number(n & mask);\n        n >>= shiftBy;\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        if (wbits === 0) {\n          var pr = precomputes[offset];\n          if (window % 2) pr = pr.negate();\n          f = f.add(pr);\n        } else {\n          var cached = precomputes[offset + Math.abs(wbits) - 1];\n          if (wbits < 0) cached = cached.negate();\n          p = p.add(cached);\n        }\n      }\n      return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar, affinePoint) {\n      return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n  }, {\n    key: \"multiplyUnsafe\",\n    value: function multiplyUnsafe(scalar) {\n      var n = normalizeScalar(scalar, CURVE.l, false);\n      var G = ExtendedPoint.BASE;\n      var P0 = ExtendedPoint.ZERO;\n      if (n === _0n) return P0;\n      if (this.equals(P0) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n);\n      var p = P0;\n      var d = this;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    }\n  }, {\n    key: \"isSmallOrder\",\n    value: function isSmallOrder() {\n      return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n  }, {\n    key: \"isTorsionFree\",\n    value: function isTorsionFree() {\n      return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n  }, {\n    key: \"toAffine\",\n    value: function toAffine() {\n      var invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n      var x = this.x,\n        y = this.y,\n        z = this.z;\n      var ax = mod(x * invZ);\n      var ay = mod(y * invZ);\n      var zz = mod(z * invZ);\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return new Point(ax, ay);\n    }\n  }, {\n    key: \"fromRistrettoBytes\",\n    value: function fromRistrettoBytes() {\n      legacyRist();\n    }\n  }, {\n    key: \"toRistrettoBytes\",\n    value: function toRistrettoBytes() {\n      legacyRist();\n    }\n  }, {\n    key: \"fromRistrettoHash\",\n    value: function fromRistrettoHash() {\n      legacyRist();\n    }\n  }], [{\n    key: \"fromAffine\",\n    value: function fromAffine(p) {\n      if (!(p instanceof Point)) {\n        throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n      }\n      if (p.equals(Point.ZERO)) return ExtendedPoint.ZERO;\n      return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n  }, {\n    key: \"toAffineBatch\",\n    value: function toAffineBatch(points) {\n      var toInv = invertBatch(points.map(function (p) {\n        return p.z;\n      }));\n      return points.map(function (p, i) {\n        return p.toAffine(toInv[i]);\n      });\n    }\n  }, {\n    key: \"normalizeZ\",\n    value: function normalizeZ(points) {\n      return this.toAffineBatch(points).map(this.fromAffine);\n    }\n  }]);\n  return ExtendedPoint;\n}();\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n  if (!(other instanceof ExtendedPoint)) throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistrettoPoint)) throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n  throw new Error('Legacy method: switch to RistrettoPoint');\n}\nvar RistrettoPoint = /*#__PURE__*/function () {\n  function RistrettoPoint(ep) {\n    _classCallCheck(this, RistrettoPoint);\n    this.ep = ep;\n  }\n  _createClass(RistrettoPoint, [{\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var _this$ep = this.ep,\n        x = _this$ep.x,\n        y = _this$ep.y,\n        z = _this$ep.z,\n        t = _this$ep.t;\n      var u1 = mod(mod(z + y) * mod(z - y));\n      var u2 = mod(x * y);\n      var u2sq = mod(u2 * u2);\n      var _invertSqrt = invertSqrt(mod(u1 * u2sq)),\n        invsqrt = _invertSqrt.value;\n      var D1 = mod(invsqrt * u1);\n      var D2 = mod(invsqrt * u2);\n      var zInv = mod(D1 * D2 * t);\n      var D;\n      if (edIsNegative(t * zInv)) {\n        var _x = mod(y * SQRT_M1);\n        var _y = mod(x * SQRT_M1);\n        x = _x;\n        y = _y;\n        D = mod(D1 * INVSQRT_A_MINUS_D);\n      } else {\n        D = D2;\n      }\n      if (edIsNegative(x * zInv)) y = mod(-y);\n      var s = mod((z - y) * D);\n      if (edIsNegative(s)) s = mod(-s);\n      return numberTo32BytesLE(s);\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      assertRstPoint(other);\n      var a = this.ep;\n      var b = other.ep;\n      var one = mod(a.x * b.y) === mod(a.y * b.x);\n      var two = mod(a.y * b.y) === mod(a.x * b.x);\n      return one || two;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.add(other.ep));\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n  }, {\n    key: \"multiplyUnsafe\",\n    value: function multiplyUnsafe(scalar) {\n      return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n  }], [{\n    key: \"calcElligatorRistrettoMap\",\n    value: function calcElligatorRistrettoMap(r0) {\n      var d = CURVE.d;\n      var r = mod(SQRT_M1 * r0 * r0);\n      var Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n      var c = BigInt(-1);\n      var D = mod((c - d * r) * mod(r + d));\n      var _uvRatio = uvRatio(Ns, D),\n        Ns_D_is_sq = _uvRatio.isValid,\n        s = _uvRatio.value;\n      var s_ = mod(s * r0);\n      if (!edIsNegative(s_)) s_ = mod(-s_);\n      if (!Ns_D_is_sq) s = s_;\n      if (!Ns_D_is_sq) c = r;\n      var Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n      var s2 = s * s;\n      var W0 = mod((s + s) * D);\n      var W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n      var W2 = mod(_1n - s2);\n      var W3 = mod(_1n + s2);\n      return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n  }, {\n    key: \"hashToCurve\",\n    value: function hashToCurve(hex) {\n      hex = ensureBytes(hex, 64);\n      var r1 = bytes255ToNumberLE(hex.slice(0, 32));\n      var R1 = this.calcElligatorRistrettoMap(r1);\n      var r2 = bytes255ToNumberLE(hex.slice(32, 64));\n      var R2 = this.calcElligatorRistrettoMap(r2);\n      return new RistrettoPoint(R1.add(R2));\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      hex = ensureBytes(hex, 32);\n      var a = CURVE.a,\n        d = CURVE.d;\n      var emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n      var s = bytes255ToNumberLE(hex);\n      if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s)) throw new Error(emsg);\n      var s2 = mod(s * s);\n      var u1 = mod(_1n + a * s2);\n      var u2 = mod(_1n - a * s2);\n      var u1_2 = mod(u1 * u1);\n      var u2_2 = mod(u2 * u2);\n      var v = mod(a * d * u1_2 - u2_2);\n      var _invertSqrt2 = invertSqrt(mod(v * u2_2)),\n        isValid = _invertSqrt2.isValid,\n        I = _invertSqrt2.value;\n      var Dx = mod(I * u2);\n      var Dy = mod(I * Dx * v);\n      var x = mod((s + s) * Dx);\n      if (edIsNegative(x)) x = mod(-x);\n      var y = mod(u1 * Dy);\n      var t = mod(x * y);\n      if (!isValid || edIsNegative(t) || y === _0n) throw new Error(emsg);\n      return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n  }]);\n  return RistrettoPoint;\n}();\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nvar pointPrecomputes = new WeakMap();\nvar Point = /*#__PURE__*/function () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n    this.x = x;\n    this.y = y;\n  }\n  _createClass(Point, [{\n    key: \"_setWindowSize\",\n    value: function _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n  }, {\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var bytes = numberTo32BytesLE(this.y);\n      bytes[31] |= this.x & _1n ? 0x80 : 0;\n      return bytes;\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }, {\n    key: \"toX25519\",\n    value: function toX25519() {\n      var y = this.y;\n      var u = mod((_1n + y) * invert(_1n - y));\n      return numberTo32BytesLE(u);\n    }\n  }, {\n    key: \"isTorsionFree\",\n    value: function isTorsionFree() {\n      return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.x === other.x && this.y === other.y;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new Point(mod(-this.x), this.y);\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return this.add(other.negate());\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var d = CURVE.d,\n        P = CURVE.P;\n      hex = ensureBytes(hex, 32);\n      var normed = hex.slice();\n      normed[31] = hex[31] & ~0x80;\n      var y = bytesToNumberLE(normed);\n      if (strict && y >= P) throw new Error('Expected 0 < hex < P');\n      if (!strict && y >= POW_2_256) throw new Error('Expected 0 < hex < 2**256');\n      var y2 = mod(y * y);\n      var u = mod(y2 - _1n);\n      var v = mod(d * y2 + _1n);\n      var _uvRatio2 = uvRatio(u, v),\n        isValid = _uvRatio2.isValid,\n        x = _uvRatio2.value;\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      var isXOdd = (x & _1n) === _1n;\n      var isLastByteOdd = (hex[31] & 0x80) !== 0;\n      if (isLastByteOdd !== isXOdd) {\n        x = mod(-x);\n      }\n      return new Point(x, y);\n    }\n  }, {\n    key: \"fromPrivateKey\",\n    value: function () {\n      var _fromPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(privateKey) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getExtendedPublicKey(privateKey);\n              case 2:\n                return _context.abrupt(\"return\", _context.sent.point);\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function fromPrivateKey(_x2) {\n        return _fromPrivateKey.apply(this, arguments);\n      }\n      return fromPrivateKey;\n    }()\n  }]);\n  return Point;\n}();\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nvar Signature = /*#__PURE__*/function () {\n  function Signature(r, s) {\n    _classCallCheck(this, Signature);\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n  _createClass(Signature, [{\n    key: \"assertValidity\",\n    value: function assertValidity() {\n      var r = this.r,\n        s = this.s;\n      if (!(r instanceof Point)) throw new Error('Expected Point instance');\n      normalizeScalar(s, CURVE.l, false);\n      return this;\n    }\n  }, {\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var u8 = new Uint8Array(64);\n      u8.set(this.r.toRawBytes());\n      u8.set(numberTo32BytesLE(this.s), 32);\n      return u8;\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var bytes = ensureBytes(hex, 64);\n      var r = Point.fromHex(bytes.slice(0, 32), false);\n      var s = bytesToNumberLE(bytes.slice(32, 64));\n      return new Signature(r, s);\n    }\n  }]);\n  return Signature;\n}();\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  if (!arrays.every(function (a) {\n    return a instanceof Uint8Array;\n  })) throw new Error('Expected Uint8Array list');\n  if (arrays.length === 1) return arrays[0];\n  var length = arrays.reduce(function (a, arr) {\n    return a + arr.length;\n  }, 0);\n  var result = new Uint8Array(length);\n  for (var i = 0, pad = 0; i < arrays.length; i++) {\n    var arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\nvar hexes = Array.from({\n  length: 256\n}, function (v, i) {\n  return i.toString(16).padStart(2, '0');\n});\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  var hex = '';\n  for (var i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  var array = new Uint8Array(hex.length / 2);\n  for (var i = 0; i < array.length; i++) {\n    var j = i * 2;\n    var hexByte = hex.slice(j, j + 2);\n    var byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\nfunction numberTo32BytesBE(num) {\n  var length = 32;\n  var hex = num.toString(16).padStart(length * 2, '0');\n  return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n  return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n  return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nvar MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n  return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a) {\n  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  var res = a % b;\n  return res >= _0n ? res : b + res;\n}\nfunction invert(number) {\n  var modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(\"invert: expected positive integers, got n=\".concat(number, \" mod=\").concat(modulo));\n  }\n  var a = mod(number, modulo);\n  var b = modulo;\n  var x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    var q = b / a;\n    var r = b % a;\n    var m = x - u * q;\n    var n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  var gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\nfunction invertBatch(nums) {\n  var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  var tmp = new Array(nums.length);\n  var lastMultiplied = nums.reduce(function (acc, num, i) {\n    if (num === _0n) return acc;\n    tmp[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  var inverted = invert(lastMultiplied, p);\n  nums.reduceRight(function (acc, num, i) {\n    if (num === _0n) return acc;\n    tmp[i] = mod(acc * tmp[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return tmp;\n}\nfunction pow2(x, power) {\n  var P = CURVE.P;\n  var res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n  return res;\n}\nfunction pow_2_252_3(x) {\n  var P = CURVE.P;\n  var _5n = BigInt(5);\n  var _10n = BigInt(10);\n  var _20n = BigInt(20);\n  var _40n = BigInt(40);\n  var _80n = BigInt(80);\n  var x2 = x * x % P;\n  var b2 = x2 * x % P;\n  var b4 = pow2(b2, _2n) * b2 % P;\n  var b5 = pow2(b4, _1n) * x % P;\n  var b10 = pow2(b5, _5n) * b5 % P;\n  var b20 = pow2(b10, _10n) * b10 % P;\n  var b40 = pow2(b20, _20n) * b20 % P;\n  var b80 = pow2(b40, _40n) * b40 % P;\n  var b160 = pow2(b80, _80n) * b80 % P;\n  var b240 = pow2(b160, _80n) * b80 % P;\n  var b250 = pow2(b240, _10n) * b10 % P;\n  var pow_p_5_8 = pow2(b250, _2n) * x % P;\n  return {\n    pow_p_5_8: pow_p_5_8,\n    b2: b2\n  };\n}\nfunction uvRatio(u, v) {\n  var v3 = mod(v * v * v);\n  var v7 = mod(v3 * v3 * v);\n  var pow = pow_2_252_3(u * v7).pow_p_5_8;\n  var x = mod(u * v3 * pow);\n  var vx2 = mod(v * x * x);\n  var root1 = x;\n  var root2 = mod(x * SQRT_M1);\n  var useRoot1 = vx2 === u;\n  var useRoot2 = vx2 === mod(-u);\n  var noRoot = vx2 === mod(-u * SQRT_M1);\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2;\n  if (edIsNegative(x)) x = mod(-x);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\nfunction invertSqrt(number) {\n  return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n  return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  for (var i = 0; i < b1.length; i++) {\n    if (b1[i] !== b2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n  var bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n  if (typeof expectedLength === 'number' && bytes.length !== expectedLength) throw new Error(\"Expected \".concat(expectedLength, \" bytes\"));\n  return bytes;\n}\nfunction normalizeScalar(num, max) {\n  var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!max) throw new TypeError('Specify max value');\n  if (typeof num === 'number' && Number.isSafeInteger(num)) num = BigInt(num);\n  if (typeof num === 'bigint' && num < max) {\n    if (strict) {\n      if (_0n < num) return num;\n    } else {\n      if (_0n <= num) return num;\n    }\n  }\n  throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n  bytes[0] &= 248;\n  bytes[31] &= 127;\n  bytes[31] |= 64;\n  return bytes;\n}\nfunction decodeScalar25519(n) {\n  return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n  key = typeof key === 'bigint' || typeof key === 'number' ? numberTo32BytesBE(normalizeScalar(key, POW_2_256)) : ensureBytes(key);\n  if (key.length !== 32) throw new Error(\"Expected 32 bytes\");\n  return key;\n}\nfunction getKeyFromHash(hashed) {\n  var head = adjustBytes25519(hashed.slice(0, 32));\n  var prefix = hashed.slice(32, 64);\n  var scalar = modlLE(head);\n  var point = Point.BASE.multiply(scalar);\n  var pointBytes = point.toRawBytes();\n  return {\n    head: head,\n    prefix: prefix,\n    scalar: scalar,\n    point: point,\n    pointBytes: pointBytes\n  };\n}\nvar _sha512Sync;\nfunction sha512s() {\n  if (typeof _sha512Sync !== 'function') throw new Error('utils.sha512Sync must be set to use sync methods');\n  return _sha512Sync.apply(void 0, arguments);\n}\nfunction getExtendedPublicKey(_x3) {\n  return _getExtendedPublicKey.apply(this, arguments);\n}\nfunction _getExtendedPublicKey() {\n  _getExtendedPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = getKeyFromHash;\n            _context3.next = 3;\n            return utils.sha512(checkPrivateKey(key));\n          case 3:\n            _context3.t1 = _context3.sent;\n            return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1));\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getExtendedPublicKey.apply(this, arguments);\n}\nfunction getExtendedPublicKeySync(key) {\n  return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport function getPublicKey(_x4) {\n  return _getPublicKey.apply(this, arguments);\n}\nfunction _getPublicKey() {\n  _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(privateKey) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getExtendedPublicKey(privateKey);\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent.pointBytes);\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getPublicKey.apply(this, arguments);\n}\nfunction getPublicKeySync(privateKey) {\n  return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport function sign(_x5, _x6) {\n  return _sign.apply(this, arguments);\n}\nfunction _sign() {\n  _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(message, privateKey) {\n    var _yield$getExtendedPub, prefix, scalar, pointBytes, r, R, k, s;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            message = ensureBytes(message);\n            _context5.next = 3;\n            return getExtendedPublicKey(privateKey);\n          case 3:\n            _yield$getExtendedPub = _context5.sent;\n            prefix = _yield$getExtendedPub.prefix;\n            scalar = _yield$getExtendedPub.scalar;\n            pointBytes = _yield$getExtendedPub.pointBytes;\n            _context5.t0 = modlLE;\n            _context5.next = 10;\n            return utils.sha512(prefix, message);\n          case 10:\n            _context5.t1 = _context5.sent;\n            r = (0, _context5.t0)(_context5.t1);\n            R = Point.BASE.multiply(r);\n            _context5.t2 = modlLE;\n            _context5.next = 16;\n            return utils.sha512(R.toRawBytes(), pointBytes, message);\n          case 16:\n            _context5.t3 = _context5.sent;\n            k = (0, _context5.t2)(_context5.t3);\n            s = mod(r + k * scalar, CURVE.l);\n            return _context5.abrupt(\"return\", new Signature(R, s).toRawBytes());\n          case 20:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _sign.apply(this, arguments);\n}\nfunction signSync(message, privateKey) {\n  message = ensureBytes(message);\n  var _getExtendedPublicKey2 = getExtendedPublicKeySync(privateKey),\n    prefix = _getExtendedPublicKey2.prefix,\n    scalar = _getExtendedPublicKey2.scalar,\n    pointBytes = _getExtendedPublicKey2.pointBytes;\n  var r = modlLE(sha512s(prefix, message));\n  var R = Point.BASE.multiply(r);\n  var k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n  var s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n  message = ensureBytes(message);\n  if (!(publicKey instanceof Point)) publicKey = Point.fromHex(publicKey, false);\n  var _ref = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig),\n    r = _ref.r,\n    s = _ref.s;\n  var SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n  return {\n    r: r,\n    s: s,\n    SB: SB,\n    pub: publicKey,\n    msg: message\n  };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n  var k = modlLE(hashed);\n  var kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n  var RkA = ExtendedPoint.fromAffine(r).add(kA);\n  return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport function verify(_x7, _x8, _x9) {\n  return _verify.apply(this, arguments);\n}\nfunction _verify() {\n  _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(sig, message, publicKey) {\n    var _prepareVerification2, r, SB, msg, pub, hashed;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _prepareVerification2 = prepareVerification(sig, message, publicKey), r = _prepareVerification2.r, SB = _prepareVerification2.SB, msg = _prepareVerification2.msg, pub = _prepareVerification2.pub;\n            _context6.next = 3;\n            return utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n          case 3:\n            hashed = _context6.sent;\n            return _context6.abrupt(\"return\", finishVerification(pub, r, SB, hashed));\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _verify.apply(this, arguments);\n}\nfunction verifySync(sig, message, publicKey) {\n  var _prepareVerification = prepareVerification(sig, message, publicKey),\n    r = _prepareVerification.r,\n    SB = _prepareVerification.SB,\n    msg = _prepareVerification.msg,\n    pub = _prepareVerification.pub;\n  var hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n  return finishVerification(pub, r, SB, hashed);\n}\nexport var sync = {\n  getExtendedPublicKey: getExtendedPublicKeySync,\n  getPublicKey: getPublicKeySync,\n  sign: signSync,\n  verify: verifySync\n};\nexport function getSharedSecret(_x10, _x11) {\n  return _getSharedSecret.apply(this, arguments);\n}\nfunction _getSharedSecret() {\n  _getSharedSecret = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(privateKey, publicKey) {\n    var _yield$getExtendedPub2, head, u;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return getExtendedPublicKey(privateKey);\n          case 2:\n            _yield$getExtendedPub2 = _context7.sent;\n            head = _yield$getExtendedPub2.head;\n            u = Point.fromHex(publicKey).toX25519();\n            return _context7.abrupt(\"return\", curve25519.scalarMult(head, u));\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getSharedSecret.apply(this, arguments);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n  var dummy = mod(swap * (x_2 - x_3));\n  x_2 = mod(x_2 - dummy);\n  x_3 = mod(x_3 + dummy);\n  return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n  var P = CURVE.P;\n  var u = normalizeScalar(pointU, P);\n  var k = normalizeScalar(scalar, P);\n  var a24 = BigInt(121665);\n  var x_1 = u;\n  var x_2 = _1n;\n  var z_2 = _0n;\n  var x_3 = u;\n  var z_3 = _1n;\n  var swap = _0n;\n  var sw;\n  for (var t = BigInt(255 - 1); t >= _0n; t--) {\n    var k_t = k >> t & _1n;\n    swap ^= k_t;\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    swap = k_t;\n    var A = x_2 + z_2;\n    var AA = mod(A * A);\n    var B = x_2 - z_2;\n    var BB = mod(B * B);\n    var E = AA - BB;\n    var C = x_3 + z_3;\n    var D = x_3 - z_3;\n    var DA = mod(D * A);\n    var CB = mod(C * B);\n    var dacb = DA + CB;\n    var da_cb = DA - CB;\n    x_3 = mod(dacb * dacb);\n    z_3 = mod(x_1 * mod(da_cb * da_cb));\n    x_2 = mod(AA * BB);\n    z_2 = mod(E * (AA + mod(a24 * E)));\n  }\n  sw = cswap(swap, x_2, x_3);\n  x_2 = sw[0];\n  x_3 = sw[1];\n  sw = cswap(swap, z_2, z_3);\n  z_2 = sw[0];\n  z_3 = sw[1];\n  var _pow_2_252_ = pow_2_252_3(z_2),\n    pow_p_5_8 = _pow_2_252_.pow_p_5_8,\n    b2 = _pow_2_252_.b2;\n  var xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n  return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n  return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n  var u = ensureBytes(uEnc, 32);\n  u[31] &= 127;\n  return bytesToNumberLE(u);\n}\nexport var curve25519 = {\n  BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n  scalarMult: function scalarMult(privateKey, publicKey) {\n    var u = decodeUCoordinate(publicKey);\n    var p = decodeScalar25519(privateKey);\n    var pu = montgomeryLadder(u, p);\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  },\n  scalarMultBase: function scalarMultBase(privateKey) {\n    return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n  }\n};\nvar crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nexport var utils = {\n  bytesToHex: bytesToHex,\n  hexToBytes: hexToBytes,\n  concatBytes: concatBytes,\n  getExtendedPublicKey: getExtendedPublicKey,\n  mod: mod,\n  invert: invert,\n  TORSION_SUBGROUP: ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'],\n  hashToPrivateScalar: function hashToPrivateScalar(hash) {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n  },\n  randomBytes: function randomBytes() {\n    var bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      var randomBytes = crypto.node.randomBytes;\n      return new Uint8Array(randomBytes(bytesLength).buffer);\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: function randomPrivateKey() {\n    return utils.randomBytes(32);\n  },\n  sha512: function () {\n    var _sha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var message,\n        buffer,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              message = concatBytes.apply(void 0, _args2);\n              if (!crypto.web) {\n                _context2.next = 8;\n                break;\n              }\n              _context2.next = 4;\n              return crypto.web.subtle.digest('SHA-512', message.buffer);\n            case 4:\n              buffer = _context2.sent;\n              return _context2.abrupt(\"return\", new Uint8Array(buffer));\n            case 8:\n              if (!crypto.node) {\n                _context2.next = 12;\n                break;\n              }\n              return _context2.abrupt(\"return\", Uint8Array.from(crypto.node.createHash('sha512').update(message).digest()));\n            case 12:\n              throw new Error(\"The environment doesn't have sha512 function\");\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    function sha512() {\n      return _sha.apply(this, arguments);\n    }\n    return sha512;\n  }(),\n  precompute: function precompute() {\n    var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    var cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n    cached._setWindowSize(windowSize);\n    cached.multiply(_2n);\n    return cached;\n  },\n  sha512Sync: undefined\n};\nObject.defineProperties(utils, {\n  sha512Sync: {\n    configurable: false,\n    get: function get() {\n      return _sha512Sync;\n    },\n    set: function set(val) {\n      if (!_sha512Sync) _sha512Sync = val;\n    }\n  }\n});","map":{"version":3,"names":["nodeCrypto","_0n","BigInt","_1n","_2n","CU_O","CURVE","Object","freeze","a","d","P","l","n","h","Gx","Gy","POW_2_256","SQRT_M1","SQRT_D","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","double","add","negate","W","windows","points","p","base","window","push","i","affinePoint","equals","BASE","Point","_WINDOW_SIZE","Error","precomputes","pointPrecomputes","get","precomputeWindow","normalizeZ","set","ZERO","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","invert","ax","ay","zz","legacyRist","TypeError","toInv","invertBatch","map","toAffine","toAffineBatch","fromAffine","assertRstPoint","RistrettoPoint","ep","u1","u2","u2sq","invertSqrt","invsqrt","value","D1","D2","zInv","edIsNegative","_x","_y","s","numberTo32BytesLE","bytesToHex","toRawBytes","toHex","b","one","two","subtract","multiply","r0","r","Ns","c","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","hex","ensureBytes","r1","bytes255ToNumberLE","slice","R1","calcElligatorRistrettoMap","r2","R2","emsg","equalBytes","u1_2","u2_2","v","I","Dx","Dy","WeakMap","delete","bytes","u","isTorsionFree","strict","normed","bytesToNumberLE","y2","isXOdd","isLastByteOdd","privateKey","getExtendedPublicKey","point","Signature","assertValidity","u8","Uint8Array","fromHex","concatBytes","arrays","every","length","reduce","arr","result","pad","hexes","Array","from","toString","padStart","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","num","reverse","MAX_255B","res","number","modulo","q","m","gcd","nums","tmp","lastMultiplied","acc","inverted","reduceRight","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","pow","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","hash","b1","expectedLength","max","isSafeInteger","adjustBytes25519","decodeScalar25519","checkPrivateKey","key","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","utils","sha512","getExtendedPublicKeySync","getPublicKey","getPublicKeySync","sign","message","R","k","signSync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","kA","RkA","verify","verifySync","sync","getSharedSecret","toX25519","curve25519","scalarMult","_setWindowSize","cswap","swap","x_2","x_3","dummy","montgomeryLadder","pointU","a24","x_1","z_2","z_3","sw","k_t","AA","BB","DA","CB","dacb","da_cb","xp2","encodeUCoordinate","decodeUCoordinate","uEnc","BASE_POINT_U","pu","scalarMultBase","crypto","node","web","self","undefined","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","buffer","randomPrivateKey","subtle","digest","createHash","update","precompute","sha512Sync","defineProperties","configurable","val"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@noble/ed25519/lib/esm/index.js"],"sourcesContent":["/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}