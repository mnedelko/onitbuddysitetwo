{"ast":null,"code":"import _classCallCheck from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport { IdlError } from \"../error\";\nexport var IdlCoder = /*#__PURE__*/function () {\n  function IdlCoder() {\n    _classCallCheck(this, IdlCoder);\n  }\n  _createClass(IdlCoder, null, [{\n    key: \"fieldLayout\",\n    value: function fieldLayout(field, types) {\n      var fieldName = field.name !== undefined ? camelCase(field.name) : undefined;\n      switch (field.type) {\n        case \"bool\":\n          {\n            return borsh.bool(fieldName);\n          }\n        case \"u8\":\n          {\n            return borsh.u8(fieldName);\n          }\n        case \"i8\":\n          {\n            return borsh.i8(fieldName);\n          }\n        case \"u16\":\n          {\n            return borsh.u16(fieldName);\n          }\n        case \"i16\":\n          {\n            return borsh.i16(fieldName);\n          }\n        case \"u32\":\n          {\n            return borsh.u32(fieldName);\n          }\n        case \"i32\":\n          {\n            return borsh.i32(fieldName);\n          }\n        case \"u64\":\n          {\n            return borsh.u64(fieldName);\n          }\n        case \"i64\":\n          {\n            return borsh.i64(fieldName);\n          }\n        case \"u128\":\n          {\n            return borsh.u128(fieldName);\n          }\n        case \"i128\":\n          {\n            return borsh.i128(fieldName);\n          }\n        case \"bytes\":\n          {\n            return borsh.vecU8(fieldName);\n          }\n        case \"string\":\n          {\n            return borsh.str(fieldName);\n          }\n        case \"publicKey\":\n          {\n            return borsh.publicKey(fieldName);\n          }\n        default:\n          {\n            // @ts-ignore\n            if (field.type.vec) {\n              return borsh.vec(IdlCoder.fieldLayout({\n                name: undefined,\n                // @ts-ignore\n                type: field.type.vec\n              }, types), fieldName);\n              // @ts-ignore\n            } else if (field.type.option) {\n              return borsh.option(IdlCoder.fieldLayout({\n                name: undefined,\n                // @ts-ignore\n                type: field.type.option\n              }, types), fieldName);\n              // @ts-ignore\n            } else if (field.type.defined) {\n              // User defined type.\n              if (types === undefined) {\n                throw new IdlError(\"User defined types not provided\");\n              }\n              // @ts-ignore\n              var filtered = types.filter(function (t) {\n                return t.name === field.type.defined;\n              });\n              if (filtered.length !== 1) {\n                throw new IdlError(\"Type not found: \".concat(JSON.stringify(field)));\n              }\n              return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n              // @ts-ignore\n            } else if (field.type.array) {\n              // @ts-ignore\n              var arrayTy = field.type.array[0];\n              // @ts-ignore\n              var arrayLen = field.type.array[1];\n              var innerLayout = IdlCoder.fieldLayout({\n                name: undefined,\n                type: arrayTy\n              }, types);\n              return borsh.array(innerLayout, arrayLen, fieldName);\n            } else {\n              throw new Error(\"Not yet implemented: \".concat(field));\n            }\n          }\n      }\n    }\n  }, {\n    key: \"typeDefLayout\",\n    value: function typeDefLayout(typeDef, types, name) {\n      if (typeDef.type.kind === \"struct\") {\n        var fieldLayouts = typeDef.type.fields.map(function (field) {\n          var x = IdlCoder.fieldLayout(field, types);\n          return x;\n        });\n        return borsh.struct(fieldLayouts, name);\n      } else if (typeDef.type.kind === \"enum\") {\n        var variants = typeDef.type.variants.map(function (variant) {\n          var name = camelCase(variant.name);\n          if (variant.fields === undefined) {\n            return borsh.struct([], name);\n          }\n          // @ts-ignore\n          var fieldLayouts = variant.fields.map(function (f) {\n            // @ts-ignore\n            if (f.name === undefined) {\n              throw new Error(\"Tuple enum variants not yet implemented.\");\n            }\n            // @ts-ignore\n            return IdlCoder.fieldLayout(f, types);\n          });\n          return borsh.struct(fieldLayouts, name);\n        });\n        if (name !== undefined) {\n          // Buffer-layout lib requires the name to be null (on construction)\n          // when used as a field.\n          return borsh.rustEnum(variants).replicate(name);\n        }\n        return borsh.rustEnum(variants, name);\n      } else {\n        throw new Error(\"Unknown type kint: \".concat(typeDef));\n      }\n    }\n  }]);\n  return IdlCoder;\n}();","map":{"version":3,"sources":["../../../src/coder/idl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport { IdlError } from \"../error\";\nexport class IdlCoder {\n    static fieldLayout(field, types) {\n        const fieldName = field.name !== undefined ? camelCase(field.name) : undefined;\n        switch (field.type) {\n            case \"bool\": {\n                return borsh.bool(fieldName);\n            }\n            case \"u8\": {\n                return borsh.u8(fieldName);\n            }\n            case \"i8\": {\n                return borsh.i8(fieldName);\n            }\n            case \"u16\": {\n                return borsh.u16(fieldName);\n            }\n            case \"i16\": {\n                return borsh.i16(fieldName);\n            }\n            case \"u32\": {\n                return borsh.u32(fieldName);\n            }\n            case \"i32\": {\n                return borsh.i32(fieldName);\n            }\n            case \"u64\": {\n                return borsh.u64(fieldName);\n            }\n            case \"i64\": {\n                return borsh.i64(fieldName);\n            }\n            case \"u128\": {\n                return borsh.u128(fieldName);\n            }\n            case \"i128\": {\n                return borsh.i128(fieldName);\n            }\n            case \"bytes\": {\n                return borsh.vecU8(fieldName);\n            }\n            case \"string\": {\n                return borsh.str(fieldName);\n            }\n            case \"publicKey\": {\n                return borsh.publicKey(fieldName);\n            }\n            default: {\n                // @ts-ignore\n                if (field.type.vec) {\n                    return borsh.vec(IdlCoder.fieldLayout({\n                        name: undefined,\n                        // @ts-ignore\n                        type: field.type.vec,\n                    }, types), fieldName);\n                    // @ts-ignore\n                }\n                else if (field.type.option) {\n                    return borsh.option(IdlCoder.fieldLayout({\n                        name: undefined,\n                        // @ts-ignore\n                        type: field.type.option,\n                    }, types), fieldName);\n                    // @ts-ignore\n                }\n                else if (field.type.defined) {\n                    // User defined type.\n                    if (types === undefined) {\n                        throw new IdlError(\"User defined types not provided\");\n                    }\n                    // @ts-ignore\n                    const filtered = types.filter((t) => t.name === field.type.defined);\n                    if (filtered.length !== 1) {\n                        throw new IdlError(`Type not found: ${JSON.stringify(field)}`);\n                    }\n                    return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n                    // @ts-ignore\n                }\n                else if (field.type.array) {\n                    // @ts-ignore\n                    let arrayTy = field.type.array[0];\n                    // @ts-ignore\n                    let arrayLen = field.type.array[1];\n                    let innerLayout = IdlCoder.fieldLayout({\n                        name: undefined,\n                        type: arrayTy,\n                    }, types);\n                    return borsh.array(innerLayout, arrayLen, fieldName);\n                }\n                else {\n                    throw new Error(`Not yet implemented: ${field}`);\n                }\n            }\n        }\n    }\n    static typeDefLayout(typeDef, types, name) {\n        if (typeDef.type.kind === \"struct\") {\n            const fieldLayouts = typeDef.type.fields.map((field) => {\n                const x = IdlCoder.fieldLayout(field, types);\n                return x;\n            });\n            return borsh.struct(fieldLayouts, name);\n        }\n        else if (typeDef.type.kind === \"enum\") {\n            let variants = typeDef.type.variants.map((variant) => {\n                const name = camelCase(variant.name);\n                if (variant.fields === undefined) {\n                    return borsh.struct([], name);\n                }\n                // @ts-ignore\n                const fieldLayouts = variant.fields.map((f) => {\n                    // @ts-ignore\n                    if (f.name === undefined) {\n                        throw new Error(\"Tuple enum variants not yet implemented.\");\n                    }\n                    // @ts-ignore\n                    return IdlCoder.fieldLayout(f, types);\n                });\n                return borsh.struct(fieldLayouts, name);\n            });\n            if (name !== undefined) {\n                // Buffer-layout lib requires the name to be null (on construction)\n                // when used as a field.\n                return borsh.rustEnum(variants).replicate(name);\n            }\n            return borsh.rustEnum(variants, name);\n        }\n        else {\n            throw new Error(`Unknown type kint: ${typeDef}`);\n        }\n    }\n}\n//# sourceMappingURL=idl.js.map"]},"metadata":{},"sourceType":"module"}