{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _defineProperty = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _gatewayStatusToCivic, _validationProcessToG;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = void 0;\nvar react_1 = require(\"react\");\nvar status_1 = require(\"../utils/status\");\nvar logger_1 = __importDefault(require(\"../logger\"));\nvar types_1 = require(\"../types\");\nvar config_1 = require(\"../config\");\nvar utils_1 = require(\"../useReducer/utils\");\nvar gatewayStatusToCivicPassAction = (_gatewayStatusToCivic = {}, _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP, types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.IN_REVIEW, types_1.CivicPassMessageAction.TOKEN_IN_REVIEW), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.ERROR, types_1.CivicPassMessageAction.ERROR), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.ACTIVE, types_1.CivicPassMessageAction.TOKEN_ACTIVE), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.REVOKED, types_1.CivicPassMessageAction.TOKEN_REVOKED), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.FROZEN, types_1.CivicPassMessageAction.TOKEN_FROZEN), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.REJECTED, types_1.CivicPassMessageAction.TOKEN_REJECTED), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.LOCATION_NOT_SUPPORTED, types_1.CivicPassMessageAction.FAILED_IP_CHECK), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.VPN_NOT_SUPPORTED, types_1.CivicPassMessageAction.FAILED_VPN_CHECK), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED, types_1.CivicPassMessageAction.REFRESH), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.CHECKING, types_1.CivicPassMessageAction.STATUS), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.NOT_REQUESTED, types_1.CivicPassMessageAction.ISSUANCE), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.COLLECTING_USER_INFORMATION, types_1.CivicPassMessageAction.ISSUANCE), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.VALIDATING_USER_INFORMATION, types_1.CivicPassMessageAction.ISSUANCE), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.USER_INFORMATION_VALIDATED, types_1.CivicPassMessageAction.ISSUANCE), _defineProperty(_gatewayStatusToCivic, types_1.GatewayStatus.USER_INFORMATION_REJECTED, types_1.CivicPassMessageAction.ISSUANCE), _defineProperty(_gatewayStatusToCivic, types_1.ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION, types_1.CivicPassMessageAction.SIGN_TRANSACTION), _defineProperty(_gatewayStatusToCivic, types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION, types_1.CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION), _defineProperty(_gatewayStatusToCivic, types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR, types_1.CivicPassMessageAction.CHAIN_ERROR), _defineProperty(_gatewayStatusToCivic, types_1.ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR, types_1.CivicPassMessageAction.CHAIN_ERROR), _gatewayStatusToCivic);\nvar validationProcessToGatewayStatus = (_validationProcessToG = {}, _defineProperty(_validationProcessToG, types_1.ValidationStatus.COLLECTING, types_1.GatewayStatus.COLLECTING_USER_INFORMATION), _defineProperty(_validationProcessToG, types_1.ValidationStatus.PROCESSING, types_1.GatewayStatus.VALIDATING_USER_INFORMATION), _defineProperty(_validationProcessToG, types_1.ValidationStatus.IN_REVIEW, types_1.GatewayStatus.VALIDATING_USER_INFORMATION), _defineProperty(_validationProcessToG, types_1.ValidationStatus.FAILED, types_1.GatewayStatus.USER_INFORMATION_REJECTED), _defineProperty(_validationProcessToG, types_1.ValidationStatus.NOT_FOUND, types_1.GatewayStatus.NOT_REQUESTED), _defineProperty(_validationProcessToG, types_1.ValidationStatus.COMPLETED, types_1.GatewayStatus.USER_INFORMATION_VALIDATED), _validationProcessToG);\nvar logDebug = function logDebug(message) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.debug(\"[useCivicPass] \".concat(message), obj);\n};\nvar logError = function logError(message) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.error(\"[useCivicPass] \".concat(message), obj);\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nvar getCivicPassSrcUrl = function getCivicPassSrcUrl(state, status, errorCode) {\n  var redirectUrl = state.redirectUrl,\n    gatekeeperNetworkAddress = state.gatekeeperNetworkAddress,\n    stage = state.stage,\n    walletAddress = state.walletAddress,\n    civicPass = state.civicPass,\n    chainType = state.chainType,\n    ownerSigns = state.ownerSigns;\n  if (!gatekeeperNetworkAddress || !walletAddress) {\n    logError('Required properties not present', {\n      gatekeeperNetworkAddress: gatekeeperNetworkAddress,\n      walletAddress: walletAddress\n    });\n    throw new Error(\"Required properties not present \".concat({\n      gatekeeperNetworkAddress: gatekeeperNetworkAddress,\n      walletAddress: walletAddress\n    }));\n  }\n  var civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n  var url = new URL(civicPassSrcUrl);\n  var action = gatewayStatusToCivicPassAction[status];\n  var searchParams = new URLSearchParams(Object.assign(Object.assign(Object.assign({}, civicPass.requestPayload), {\n    redirectUrl: redirectUrl,\n    networkAddress: gatekeeperNetworkAddress,\n    action: action,\n    wallet: walletAddress,\n    chain: chainType,\n    ownerSigns: ownerSigns ? 'true' : 'false'\n  }), errorCode ? {\n    errorCode: errorCode\n  } : {}));\n  logDebug('Civic pass query params', {\n    searchParams: searchParams.toString(),\n    gatewayStatus: (0, status_1.statusDisplayValue)(status)\n  });\n  return \"\".concat(url.href, \"?\").concat(searchParams.toString());\n};\nvar reducer = function reducer(state, action) {\n  var _a, _b, _c;\n  switch (action.type) {\n    case 'civicPass_owner_sends_chainTransactionError':\n      {\n        // set refresh token state to failed if in progress\n        var refreshTokenState = state.refreshTokenState === types_1.RefreshTokenState.IN_PROGRESS ? types_1.RefreshTokenState.FAILED : state.refreshTokenState;\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: false,\n          renderIframe: true,\n          gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR,\n          refreshTokenState: refreshTokenState,\n          iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR, (_a = action.payload) === null || _a === void 0 ? void 0 : _a.errorCode)\n        });\n      }\n    case 'civicPass_check_token_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: !((_b = state.options) === null || _b === void 0 ? void 0 : _b.autoShowModal),\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n    case 'civicPass_check_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: true,\n          gatewayStatus: types_1.GatewayStatus.CHECKING,\n          iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING)\n        });\n      }\n    case 'civicPass_check_status_complete':\n      {\n        var payload = action.payload.payload;\n        var status = payload.status;\n        var gatewayStatus = validationProcessToGatewayStatus[status];\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: false,\n          gatewayStatus: gatewayStatus\n        });\n      }\n    case 'userInteraction_check_gatewayToken_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: false,\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n    case 'civicPass_close':\n      {\n        var _gatewayStatus = state.gatewayStatus;\n        var requiresRefresh = _gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED || _gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP || (0, status_1.mapStatus)(_gatewayStatus) === types_1.GatewayStatus.ERROR && state.refreshTokenState === types_1.RefreshTokenState.FAILED;\n        // keep iframe in mounted while civic pass is requested, or if we are showing the awaiting owner tx screen\n        // as the internal iframe state needs to be preserved\n        var renderIframe = state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED || _gatewayStatus === types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION;\n        return Object.assign({}, renderIframe ? Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: renderIframe\n        }) : Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: renderIframe,\n          refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED\n        }));\n      }\n    case 'civicPass_in_progress':\n      {\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n          renderIframe: true,\n          iframeMinimized: false,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.REQUESTED\n          })\n        });\n      }\n    case 'civicPass_issuance_success':\n      {\n        var ownerSigns = state.ownerSigns;\n        var _action$payload = action.payload,\n          _payload = _action$payload.payload,\n          requiresProofOfWalletOwnership = _action$payload.requiresProofOfWalletOwnership;\n        var shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n        // Show POWO or in review for non ownerSigns depending on resulting flag\n        var gatekeeperSignsStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        // Show confirm owner transaction screen if ownerSigns is true\n        var _gatewayStatus2 = ownerSigns ? types_1.ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION : gatekeeperSignsStatus;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: _gatewayStatus2,\n          ownerTransactionConfirmed: false,\n          renderIframe: true,\n          iframeMinimized: false,\n          powoRequested: 'solana',\n          iframeSrcUrl: getCivicPassSrcUrl(state, _gatewayStatus2),\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.VERIFIED,\n            responsePayload: _defineProperty({}, types_1.CivicPassMessageAction.ISSUANCE, {\n              payload: _payload,\n              requiresProofOfWalletOwnership: shouldRequestPowo\n            })\n          })\n        });\n      }\n    case 'civicPass_issuance_failure':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR),\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          responsePayload: undefined\n        })\n      });\n    case 'civicPass_requested_retries_exhausted':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.NOT_REQUIRED,\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR)\n      });\n    case 'civicPass_error_user_retry':\n      {\n        // retry either issuance or refresh depending on the refresh token state\n        var _gatewayStatus3 = state.refreshTokenState === types_1.RefreshTokenState.FAILED ? types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED : types_1.GatewayStatus.NOT_REQUESTED;\n        return Object.assign(Object.assign({}, _gatewayStatus3 === types_1.GatewayStatus.NOT_REQUESTED ? (0, utils_1.resetState)(state) : state), {\n          iframeMinimized: false,\n          renderIframe: true,\n          gatewayStatus: _gatewayStatus3,\n          iframeSrcUrl: getCivicPassSrcUrl(state, _gatewayStatus3),\n          walletPowoInProgress: false,\n          ownerTransactionConfirmed: false\n        });\n      }\n    case 'civicPass_issuance_cancelled':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED\n      });\n    case 'civicPass_refresh_success':\n      {\n        var _ownerSigns = state.ownerSigns;\n        var _action$payload2 = action.payload,\n          _payload2 = _action$payload2.payload,\n          _requiresProofOfWalletOwnership = _action$payload2.requiresProofOfWalletOwnership;\n        var _shouldRequestPowo = _ownerSigns ? false : _requiresProofOfWalletOwnership;\n        var _gatewayStatus4 = _shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: _gatewayStatus4,\n          renderIframe: true,\n          iframeMinimized: false,\n          iframeSrcUrl: getCivicPassSrcUrl(state, _gatewayStatus4),\n          refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            responsePayload: _defineProperty({}, types_1.CivicPassMessageAction.REFRESH, {\n              payload: _payload2,\n              requiresProofOfWalletOwnership: _shouldRequestPowo\n            })\n          })\n        });\n      }\n    case 'civicPass_refresh_cancelled':\n      return Object.assign(Object.assign({}, state), {\n        refreshTokenState: types_1.RefreshTokenState.CANCELLED,\n        gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED\n      });\n    case 'civicPass_refresh_failure':\n      return Object.assign(Object.assign({}, state), {\n        refreshTokenState: types_1.RefreshTokenState.FAILED,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        iframeMinimized: false,\n        renderIframe: true,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR),\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          responsePayload: undefined\n        })\n      });\n    case 'civicPass_location_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus,\n        refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperAPIStatus.ISSUED_LOCATION_NOT_SUPPORTED ? types_1.RefreshTokenState.REQUIRES_POWO : state.refreshTokenState\n      });\n    case 'civicPass_vpn_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus\n      });\n    case 'civicPass_owner_transaction_confirmed':\n      return Object.assign(Object.assign({}, state), {\n        ownerTransactionConfirmed: true\n      });\n    case 'civicPass_awaiting_owner_transaction':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: !((_c = state.options) === null || _c === void 0 ? void 0 : _c.autoShowModal),\n        renderIframe: true,\n        gatewayStatus: types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION)\n      });\n    case 'civicPass_owner_transaction_timeout':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: false,\n        renderIframe: true,\n        gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR,\n        iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR)\n      });\n    default:\n      return state;\n  }\n};\nexports.reducer = reducer;\nvar useCivicPass = function useCivicPass(_ref, state, dispatch) {\n  var wallet = _ref.wallet;\n  var gatekeeperRecordState = state.gatekeeperRecordState;\n  var getActionForIssuanceResponse = function getActionForIssuanceResponse(response) {\n    var _actions;\n    var actions = (_actions = {}, _defineProperty(_actions, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_issuance_success',\n      payload: response\n    }), _defineProperty(_actions, types_1.CivicPassMessageEventResult.FAILURE, {\n      type: 'civicPass_issuance_failure'\n    }), _defineProperty(_actions, types_1.CivicPassMessageEventResult.CANCELLED, {\n      type: 'civicPass_issuance_cancelled'\n    }), _defineProperty(_actions, types_1.CivicPassMessageEventResult.IN_PROGRESS, {\n      type: 'civicPass_in_progress'\n    }), _actions);\n    return actions[response.event];\n  };\n  var getActionForRefreshResponse = function getActionForRefreshResponse(response) {\n    var _actions2;\n    var actions = (_actions2 = {}, _defineProperty(_actions2, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_refresh_success',\n      payload: response\n    }), _defineProperty(_actions2, types_1.CivicPassMessageEventResult.CANCELLED, {\n      type: 'civicPass_refresh_cancelled'\n    }), _defineProperty(_actions2, types_1.CivicPassMessageEventResult.FAILURE, {\n      type: 'civicPass_refresh_failure'\n    }), _actions2);\n    return actions[response.event];\n  };\n  var getActionForPowoResponse = function getActionForPowoResponse(response) {\n    var actions = _defineProperty({}, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'powoComplete'\n    });\n    return actions[response.event];\n  };\n  var getActionForLocationNotSupportedResponse = function getActionForLocationNotSupportedResponse(response) {\n    var actions = _defineProperty({}, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_location_not_supported'\n    });\n    return actions[response.event];\n  };\n  var getActionForVpnNotSupportedResponse = function getActionForVpnNotSupportedResponse(response) {\n    var actions = _defineProperty({}, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_vpn_not_supported'\n    });\n    return actions[response.event];\n  };\n  var getActionForStaticResponse = function getActionForStaticResponse(response) {\n    var _actions6;\n    var actions = (_actions6 = {}, _defineProperty(_actions6, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_close'\n    }), _defineProperty(_actions6, types_1.CivicPassMessageEventResult.FAILURE, {\n      type: 'civicPass_error_user_retry'\n    }), _actions6);\n    var returnAction = actions[response.event];\n    return returnAction;\n  };\n  var getActionForStatusResponse = function getActionForStatusResponse(response) {\n    var actions = _defineProperty({}, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_check_status_complete',\n      payload: response\n    });\n    return actions[response.event];\n  };\n  var getActionForSignTransactionResponse = function getActionForSignTransactionResponse(response) {\n    var actions = _defineProperty({}, types_1.CivicPassMessageEventResult.SUCCESS, {\n      type: 'civicPass_owner_transaction_confirmed'\n    });\n    return actions[response.event];\n  };\n  var dispatchComplianceEventResult = function dispatchComplianceEventResult(response) {\n    var _actions9;\n    var actions = (_actions9 = {}, _defineProperty(_actions9, types_1.CivicPassMessageAction.ISSUANCE, getActionForIssuanceResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP, getActionForPowoResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.TOKEN_IN_REVIEW, getActionForStaticResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.TOKEN_ACTIVE, getActionForStaticResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.TOKEN_FROZEN, getActionForStaticResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.TOKEN_REJECTED, getActionForStaticResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.TOKEN_REVOKED, getActionForStaticResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.FAILED_IP_CHECK, getActionForLocationNotSupportedResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.FAILED_VPN_CHECK, getActionForVpnNotSupportedResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.REFRESH, getActionForRefreshResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.STATUS, getActionForStatusResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.ERROR, getActionForStaticResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.CHAIN_ERROR, getActionForStaticResponse(response)), _defineProperty(_actions9, types_1.CivicPassMessageAction.SIGN_TRANSACTION, getActionForSignTransactionResponse(response)), _actions9);\n    var action = actions[response.action];\n    if (action) {\n      logDebug('Successfully processed compliance event with action', action);\n      dispatch(action);\n    }\n  };\n  /**\n   * Listen for post messages from the compliance iframe and dispatch events\n   * based on the event type\n   */\n  (0, react_1.useEffect)(function () {\n    if (wallet && wallet.publicKey) {\n      logDebug('Current state', state);\n      var handler = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatchComplianceEventResult(response.data);\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        return function handler(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      window.addEventListener('message', handler);\n      return function () {\n        logDebug('Removing event listener for compliance');\n        return window.removeEventListener('message', handler);\n      };\n    }\n    return function () {};\n  }, []);\n  /**\n   * We do not have a token and user is connecting from an unsupported country,\n   * so we show the country not supported screen\n   */\n  (0, react_1.useEffect)(function () {\n    if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED || gatekeeperRecordState === types_1.GatekeeperAPIStatus.VPN_NOT_SUPPORTED) {\n      dispatch({\n        type: 'civicPass_check_token_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  /**\n   * Check for the ongoing KYC status\n   */\n  (0, react_1.useEffect)(function () {\n    if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.NOT_REQUESTED) {\n      dispatch({\n        type: 'civicPass_check_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  return {\n    dispatchComplianceEventResult: dispatchComplianceEventResult\n  };\n};\nexports.default = useCivicPass;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","reducer","react_1","require","status_1","logger_1","types_1","config_1","utils_1","gatewayStatusToCivicPassAction","GatewayStatus","PROOF_OF_WALLET_OWNERSHIP","CivicPassMessageAction","IN_REVIEW","TOKEN_IN_REVIEW","ERROR","ACTIVE","TOKEN_ACTIVE","REVOKED","TOKEN_REVOKED","FROZEN","TOKEN_FROZEN","REJECTED","TOKEN_REJECTED","LOCATION_NOT_SUPPORTED","FAILED_IP_CHECK","VPN_NOT_SUPPORTED","FAILED_VPN_CHECK","REFRESH_TOKEN_REQUIRED","REFRESH","CHECKING","STATUS","NOT_REQUESTED","ISSUANCE","COLLECTING_USER_INFORMATION","VALIDATING_USER_INFORMATION","USER_INFORMATION_VALIDATED","USER_INFORMATION_REJECTED","ExtendedGatewayStatus","CONFIRM_OWNER_TRANSACTION","SIGN_TRANSACTION","AWAITING_OWNER_TRANSACTION","AWAITING_TRANSACTION_CONFIRMATION","CHAIN_TIMEOUT_ERROR","CHAIN_ERROR","CHAIN_TRANSACTION_ERROR","validationProcessToGatewayStatus","ValidationStatus","COLLECTING","PROCESSING","FAILED","NOT_FOUND","COMPLETED","logDebug","message","obj","default","debug","logError","error","getCivicPassSrcUrl","state","status","errorCode","redirectUrl","gatekeeperNetworkAddress","stage","walletAddress","civicPass","chainType","ownerSigns","Error","civicPassSrcUrl","getCivicPassEndpoint","url","URL","action","searchParams","URLSearchParams","assign","requestPayload","networkAddress","wallet","chain","toString","gatewayStatus","statusDisplayValue","href","_a","_b","_c","type","refreshTokenState","RefreshTokenState","IN_PROGRESS","iframeMinimized","renderIframe","iframeSrcUrl","payload","options","autoShowModal","CivicPassIssuanceStatus","REQUESTED","statusFromToken","token","requiresRefresh","mapStatus","requiresProofOfWalletOwnership","shouldRequestPowo","gatekeeperSignsStatus","ownerTransactionConfirmed","powoRequested","VERIFIED","responsePayload","resetState","undefined","NOT_REQUIRED","walletPowoInProgress","CANCELLED","gatekeeperRecordState","GatekeeperAPIStatus","ISSUED_LOCATION_NOT_SUPPORTED","REQUIRES_POWO","useCivicPass","dispatch","getActionForIssuanceResponse","response","actions","CivicPassMessageEventResult","SUCCESS","FAILURE","event","getActionForRefreshResponse","getActionForPowoResponse","getActionForLocationNotSupportedResponse","getActionForVpnNotSupportedResponse","getActionForStaticResponse","returnAction","getActionForStatusResponse","getActionForSignTransactionResponse","dispatchComplianceEventResult","useEffect","publicKey","handler","data","window","addEventListener","removeEventListener"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@civic/common-gateway-react/dist/esm/useHooks/useCivicPass.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reducer = void 0;\nconst react_1 = require(\"react\");\nconst status_1 = require(\"../utils/status\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst config_1 = require(\"../config\");\nconst utils_1 = require(\"../useReducer/utils\");\nconst gatewayStatusToCivicPassAction = {\n    [types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n    [types_1.GatewayStatus.IN_REVIEW]: types_1.CivicPassMessageAction.TOKEN_IN_REVIEW,\n    [types_1.GatewayStatus.ERROR]: types_1.CivicPassMessageAction.ERROR,\n    [types_1.GatewayStatus.ACTIVE]: types_1.CivicPassMessageAction.TOKEN_ACTIVE,\n    [types_1.GatewayStatus.REVOKED]: types_1.CivicPassMessageAction.TOKEN_REVOKED,\n    [types_1.GatewayStatus.FROZEN]: types_1.CivicPassMessageAction.TOKEN_FROZEN,\n    [types_1.GatewayStatus.REJECTED]: types_1.CivicPassMessageAction.TOKEN_REJECTED,\n    [types_1.GatewayStatus.LOCATION_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_IP_CHECK,\n    [types_1.GatewayStatus.VPN_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_VPN_CHECK,\n    [types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED]: types_1.CivicPassMessageAction.REFRESH,\n    [types_1.GatewayStatus.CHECKING]: types_1.CivicPassMessageAction.STATUS,\n    [types_1.GatewayStatus.NOT_REQUESTED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.COLLECTING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.VALIDATING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_VALIDATED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_REJECTED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION]: types_1.CivicPassMessageAction.SIGN_TRANSACTION,\n    [types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION]: types_1.CivicPassMessageAction.AWAITING_TRANSACTION_CONFIRMATION,\n    [types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR]: types_1.CivicPassMessageAction.CHAIN_ERROR,\n    [types_1.ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR]: types_1.CivicPassMessageAction.CHAIN_ERROR,\n};\nconst validationProcessToGatewayStatus = {\n    [types_1.ValidationStatus.COLLECTING]: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n    [types_1.ValidationStatus.PROCESSING]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.IN_REVIEW]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.FAILED]: types_1.GatewayStatus.USER_INFORMATION_REJECTED,\n    [types_1.ValidationStatus.NOT_FOUND]: types_1.GatewayStatus.NOT_REQUESTED,\n    [types_1.ValidationStatus.COMPLETED]: types_1.GatewayStatus.USER_INFORMATION_VALIDATED,\n};\nconst logDebug = (message, obj = null) => logger_1.default.debug(`[useCivicPass] ${message}`, obj);\nconst logError = (message, obj = null) => logger_1.default.error(`[useCivicPass] ${message}`, obj);\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst getCivicPassSrcUrl = (state, status, errorCode) => {\n    const { redirectUrl, gatekeeperNetworkAddress, stage, walletAddress, civicPass, chainType, ownerSigns } = state;\n    if (!gatekeeperNetworkAddress || !walletAddress) {\n        logError('Required properties not present', { gatekeeperNetworkAddress, walletAddress });\n        throw new Error(`Required properties not present ${{ gatekeeperNetworkAddress, walletAddress }}`);\n    }\n    const civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n    const url = new URL(civicPassSrcUrl);\n    const action = gatewayStatusToCivicPassAction[status];\n    const searchParams = new URLSearchParams(Object.assign(Object.assign(Object.assign({}, civicPass.requestPayload), { redirectUrl, networkAddress: gatekeeperNetworkAddress, action, wallet: walletAddress, chain: chainType, ownerSigns: ownerSigns ? 'true' : 'false' }), (errorCode ? { errorCode } : {})));\n    logDebug('Civic pass query params', {\n        searchParams: searchParams.toString(),\n        gatewayStatus: (0, status_1.statusDisplayValue)(status),\n    });\n    return `${url.href}?${searchParams.toString()}`;\n};\nconst reducer = (state, action) => {\n    var _a, _b, _c;\n    switch (action.type) {\n        case 'civicPass_owner_sends_chainTransactionError': {\n            // set refresh token state to failed if in progress\n            const refreshTokenState = state.refreshTokenState === types_1.RefreshTokenState.IN_PROGRESS ? types_1.RefreshTokenState.FAILED : state.refreshTokenState;\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR, refreshTokenState, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TRANSACTION_ERROR, (_a = action.payload) === null || _a === void 0 ? void 0 : _a.errorCode) });\n        }\n        case 'civicPass_check_token_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: !((_b = state.options) === null || _b === void 0 ? void 0 : _b.autoShowModal), renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_check_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: true, gatewayStatus: types_1.GatewayStatus.CHECKING, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING) });\n        }\n        case 'civicPass_check_status_complete': {\n            const { payload } = action.payload;\n            const { status } = payload;\n            const gatewayStatus = validationProcessToGatewayStatus[status];\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus });\n        }\n        case 'userInteraction_check_gatewayToken_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_close': {\n            const { gatewayStatus } = state;\n            const requiresRefresh = gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED ||\n                gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP ||\n                ((0, status_1.mapStatus)(gatewayStatus) === types_1.GatewayStatus.ERROR && state.refreshTokenState === types_1.RefreshTokenState.FAILED);\n            // keep iframe in mounted while civic pass is requested, or if we are showing the awaiting owner tx screen\n            // as the internal iframe state needs to be preserved\n            const renderIframe = state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ||\n                gatewayStatus === types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION;\n            return Object.assign({}, (renderIframe\n                ? Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe }) : Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe, refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED })));\n        }\n        case 'civicPass_in_progress': {\n            return Object.assign(Object.assign({}, state), { gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION, renderIframe: true, iframeMinimized: false, civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.REQUESTED }) });\n        }\n        case 'civicPass_issuance_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            // Show POWO or in review for non ownerSigns depending on resulting flag\n            const gatekeeperSignsStatus = shouldRequestPowo\n                ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP\n                : types_1.GatewayStatus.IN_REVIEW;\n            // Show confirm owner transaction screen if ownerSigns is true\n            const gatewayStatus = ownerSigns ? types_1.ExtendedGatewayStatus.CONFIRM_OWNER_TRANSACTION : gatekeeperSignsStatus;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, ownerTransactionConfirmed: false, renderIframe: true, iframeMinimized: false, powoRequested: 'solana', iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.VERIFIED, responsePayload: {\n                        [types_1.CivicPassMessageAction.ISSUANCE]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_issuance_failure':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.ERROR, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR), civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: undefined }) });\n        case 'civicPass_requested_retries_exhausted':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.NOT_REQUIRED, iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.GatewayStatus.ERROR, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR) });\n        case 'civicPass_error_user_retry': {\n            // retry either issuance or refresh depending on the refresh token state\n            const gatewayStatus = state.refreshTokenState === types_1.RefreshTokenState.FAILED\n                ? types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED\n                : types_1.GatewayStatus.NOT_REQUESTED;\n            return Object.assign(Object.assign({}, (gatewayStatus === types_1.GatewayStatus.NOT_REQUESTED ? (0, utils_1.resetState)(state) : state)), { iframeMinimized: false, renderIframe: true, gatewayStatus, iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), walletPowoInProgress: false, ownerTransactionConfirmed: false });\n        }\n        case 'civicPass_issuance_cancelled':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED });\n        case 'civicPass_refresh_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: true, iframeMinimized: false, iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: {\n                        [types_1.CivicPassMessageAction.REFRESH]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_refresh_cancelled':\n            return Object.assign(Object.assign({}, state), { refreshTokenState: types_1.RefreshTokenState.CANCELLED, gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED });\n        case 'civicPass_refresh_failure':\n            return Object.assign(Object.assign({}, state), { refreshTokenState: types_1.RefreshTokenState.FAILED, gatewayStatus: types_1.GatewayStatus.ERROR, iframeMinimized: false, renderIframe: true, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.ERROR), civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: undefined }) });\n        case 'civicPass_location_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus, refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperAPIStatus.ISSUED_LOCATION_NOT_SUPPORTED\n                    ? types_1.RefreshTokenState.REQUIRES_POWO\n                    : state.refreshTokenState });\n        case 'civicPass_vpn_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus });\n        case 'civicPass_owner_transaction_confirmed':\n            return Object.assign(Object.assign({}, state), { ownerTransactionConfirmed: true });\n        case 'civicPass_awaiting_owner_transaction':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: !((_c = state.options) === null || _c === void 0 ? void 0 : _c.autoShowModal), renderIframe: true, gatewayStatus: types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.AWAITING_OWNER_TRANSACTION) });\n        case 'civicPass_owner_transaction_timeout':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, gatewayStatus: types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.ExtendedGatewayStatus.CHAIN_TIMEOUT_ERROR) });\n        default:\n            return state;\n    }\n};\nexports.reducer = reducer;\nconst useCivicPass = ({ wallet }, state, dispatch) => {\n    const { gatekeeperRecordState } = state;\n    const getActionForIssuanceResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_issuance_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_issuance_failure',\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_issuance_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.IN_PROGRESS]: {\n                type: 'civicPass_in_progress',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForRefreshResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_refresh_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_refresh_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_refresh_failure',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForPowoResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'powoComplete',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForLocationNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_location_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForVpnNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_vpn_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForStaticResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_close',\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_error_user_retry',\n            },\n        };\n        const returnAction = actions[response.event];\n        return returnAction;\n    };\n    const getActionForStatusResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_check_status_complete',\n                payload: response,\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForSignTransactionResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_owner_transaction_confirmed',\n            },\n        };\n        return actions[response.event];\n    };\n    const dispatchComplianceEventResult = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n            [types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_VPN_CHECK]: getActionForVpnNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n            [types_1.CivicPassMessageAction.STATUS]: getActionForStatusResponse(response),\n            [types_1.CivicPassMessageAction.ERROR]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.CHAIN_ERROR]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.SIGN_TRANSACTION]: getActionForSignTransactionResponse(response),\n        };\n        const action = actions[response.action];\n        if (action) {\n            logDebug('Successfully processed compliance event with action', action);\n            dispatch(action);\n        }\n    };\n    /**\n     * Listen for post messages from the compliance iframe and dispatch events\n     * based on the event type\n     */\n    (0, react_1.useEffect)(() => {\n        if (wallet && wallet.publicKey) {\n            logDebug('Current state', state);\n            const handler = async (response) => {\n                dispatchComplianceEventResult(response.data);\n            };\n            window.addEventListener('message', handler);\n            return () => {\n                logDebug('Removing event listener for compliance');\n                return window.removeEventListener('message', handler);\n            };\n        }\n        return () => { };\n    }, []);\n    /**\n     * We do not have a token and user is connecting from an unsupported country,\n     * so we show the country not supported screen\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.LOCATION_NOT_SUPPORTED ||\n            gatekeeperRecordState === types_1.GatekeeperAPIStatus.VPN_NOT_SUPPORTED) {\n            dispatch({ type: 'civicPass_check_token_status' });\n        }\n    }, [gatekeeperRecordState]);\n    /**\n     * Check for the ongoing KYC status\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperAPIStatus.NOT_REQUESTED) {\n            dispatch({ type: 'civicPass_check_status' });\n        }\n    }, [gatekeeperRecordState]);\n    return { dispatchComplianceEventResult };\n};\nexports.default = useCivicPass;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}