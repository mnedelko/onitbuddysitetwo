{"ast":null,"code":"import _classCallCheck from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\nexport var TypesCoder = /*#__PURE__*/function () {\n  function TypesCoder(idl) {\n    _classCallCheck(this, TypesCoder);\n    if (idl.types === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n    var layouts = idl.types.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    // @ts-ignore\n    this.layouts = new Map(layouts);\n  }\n  _createClass(TypesCoder, [{\n    key: \"encode\",\n    value: function encode(accountName, account) {\n      var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n      var layout = this.layouts.get(accountName);\n      var len = layout.encode(account, buffer);\n      return buffer.slice(0, len);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      var layout = this.layouts.get(accountName);\n      return layout.decode(ix);\n    }\n  }]);\n  return TypesCoder;\n}();","map":{"version":3,"sources":["../../../src/coder/types.ts"],"names":[],"mappings":";;AAEA,SAAS,QAAQ,QAAQ,OAAO;AAEhC;;AAEG;AACH,WAAa,UAAU;EAMrB,oBAAmB,GAAQ,EAAA;IAAA;IACzB,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS,EAAE;MAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE;MACxB;IACD;IACD,IAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,GAAG,EAAI;MACpC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC,CAAC;IAEF;IACA,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC;EACjC;EAAC;IAAA;IAAA,OAEM,gBAAgB,WAAmB,EAAE,OAAU,EAAA;MACpD,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;MACnC,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;MAC5C,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;MAC1C,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;IAC7B;EAAC;IAAA;IAAA,OAEM,gBAAgB,WAAmB,EAAE,EAAU,EAAA;MACpD,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;MAC5C,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;IAC1B;EAAC;EAAA;AAAA","sourceRoot":"","sourcesContent":["import { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\nexport class TypesCoder {\n    constructor(idl) {\n        if (idl.types === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const layouts = idl.types.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n    }\n    encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.layouts.get(accountName);\n        const len = layout.encode(account, buffer);\n        return buffer.slice(0, len);\n    }\n    decode(accountName, ix) {\n        const layout = this.layouts.get(accountName);\n        return layout.decode(ix);\n    }\n}\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"module"}