{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Enum = exports.Assignable = exports.SCHEMA = void 0;\nvar borsh_1 = require(\"borsh\");\nexports.SCHEMA = new Map();\n// Class wrapping a plain object\nvar Assignable = /*#__PURE__*/function () {\n  function Assignable(properties) {\n    var _this = this;\n    _classCallCheck(this, Assignable);\n    Object.keys(properties).forEach(function (key) {\n      // this is probably possible in Typescript,\n      // but requires (keyof this) which is not possible in the the constructor\n      // @ts-ignore\n      _this[key] = properties[key];\n    });\n  }\n  _createClass(Assignable, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from((0, borsh_1.serialize)(exports.SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return (0, borsh_1.deserialize)(exports.SCHEMA, this, data);\n    }\n  }]);\n  return Assignable;\n}();\nexports.Assignable = Assignable;\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nvar Enum = /*#__PURE__*/function (_Assignable) {\n  _inherits(Enum, _Assignable);\n  var _super = _createSuper(Enum);\n  function Enum(properties) {\n    var _this2;\n    _classCallCheck(this, Enum);\n    _this2 = _super.call(this, properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error(\"Enum can only take single value\");\n    }\n    _this2.enum = \"\";\n    Object.keys(properties).forEach(function (key) {\n      _this2.enum = key;\n    });\n    return _this2;\n  }\n  return _createClass(Enum);\n}(Assignable);\nexports.Enum = Enum;","map":{"version":3,"sources":["../../src/lib/solanaBorsh.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AAEa,OAAA,CAAA,MAAM,GAAW,IAAI,GAAG,EAAE;AAEvC;AAAA,IACsB,UAAU;EAC9B,oBAAY,UAAkC,EAAA;IAAA;IAAA;IAC5C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW,EAAI;MAC9C;MACA;MACA;MACA,KAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC;IAC7B,CAAC,CAAC;EACJ;EAAC;IAAA;IAAA,OAED,kBAAM;MACJ,OAAO,MAAM,CAAC,IAAI,CAAC,CAAA,CAAA,EAAA,OAAA,CAAA,SAAS,EAAC,OAAA,CAAA,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C;EAAC;IAAA;IAAA,OAED,gBAAoC,IAAY,EAAA;MAC9C,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,WAAW,EAAC,OAAA,CAAA,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;IACxC;EAAC;EAAA;AAAA;AAhBH,OAAA,CAAA,UAAA,GAAA,UAAA;AAmBA;AACA;AAAA,IACsB,IAAK;EAAA;EAAA;EAGzB,cAAY,UAAe,EAAA;IAAA;IAAA;IACzB,2BAAM,UAAU;IAChB,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;MACxC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;IACnD;IACD,OAAK,IAAI,GAAG,EAAE;IACd,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAI;MACtC,OAAK,IAAI,GAAG,GAAG;IACjB,CAAC,CAAC;IAAC;EACL;EAAC;AAAA,EAZgC,UAAU;AAA7C,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Enum = exports.Assignable = exports.SCHEMA = void 0;\nconst borsh_1 = require(\"borsh\");\nexports.SCHEMA = new Map();\n// Class wrapping a plain object\nclass Assignable {\n    constructor(properties) {\n        Object.keys(properties).forEach((key) => {\n            // this is probably possible in Typescript,\n            // but requires (keyof this) which is not possible in the the constructor\n            // @ts-ignore\n            this[key] = properties[key];\n        });\n    }\n    encode() {\n        return Buffer.from((0, borsh_1.serialize)(exports.SCHEMA, this));\n    }\n    static decode(data) {\n        return (0, borsh_1.deserialize)(exports.SCHEMA, this, data);\n    }\n}\nexports.Assignable = Assignable;\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Assignable {\n    constructor(properties) {\n        super(properties);\n        if (Object.keys(properties).length !== 1) {\n            throw new Error(\"Enum can only take single value\");\n        }\n        this.enum = \"\";\n        Object.keys(properties).forEach((key) => {\n            this.enum = key;\n        });\n    }\n}\nexports.Enum = Enum;\n//# sourceMappingURL=solanaBorsh.js.map"]},"metadata":{},"sourceType":"script"}