{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _slicedToArray = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar fetch_retry_ts_1 = __importDefault(require(\"fetch-retry-ts\"));\nvar types_1 = require(\"../types\");\nvar logger_1 = __importDefault(require(\"../logger\"));\nvar config_1 = require(\"../config\");\nvar testRetryMultipler = function testRetryMultipler() {\n  return parseFloat(process.env.TEST_RETRY_MULTIPLIER || '') || 1;\n};\nvar GatekeeperClient = /*#__PURE__*/function () {\n  function GatekeeperClient(gatekeeperClientConfig) {\n    _classCallCheck(this, GatekeeperClient);\n    this.baseUrl = gatekeeperClientConfig.baseUrl;\n    this.stage = gatekeeperClientConfig.stage;\n    this.queryParams = gatekeeperClientConfig.queryParams;\n    this.headers = gatekeeperClientConfig.headers;\n    this.fetchImplementation = gatekeeperClientConfig.fetchImplementation || fetch;\n    // By default retry on every 5xx or other Error (e.g. network failure):\n    this.defaultRetryParams = {\n      retries: gatekeeperClientConfig.numRetries || (0, config_1.getDefaultApiNumRetries)(this.stage),\n      retryOn: function retryOn(attempt, retries, error, response) {\n        return attempt < retries && (!!error || !response || response.status >= 500);\n      },\n      retryDelay: function retryDelay(attempt) {\n        return Math.pow(2, attempt) * 1000 * testRetryMultipler();\n      }\n    };\n    this.fetchWithRetry = (0, fetch_retry_ts_1.default)(this.fetchImplementation, this.defaultRetryParams);\n  }\n  _createClass(GatekeeperClient, [{\n    key: \"addQueryParams\",\n    value: function addQueryParams(url) {\n      if (!this.queryParams) return;\n      Object.entries(this.queryParams).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        url.searchParams.append(key, value);\n      });\n    }\n  }, {\n    key: \"urlForWallet\",\n    value: function urlForWallet(walletAddress) {\n      var url = new URL(\"\".concat(this.baseUrl, \"/\").concat(walletAddress));\n      this.addQueryParams(url);\n      return url.toString();\n    }\n  }, {\n    key: \"getGatekeeperRecordWithPayload\",\n    value: function () {\n      var _getGatekeeperRecordWithPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(walletAddress) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.fetchWithRetry(this.urlForWallet(walletAddress), {\n                  method: 'GET',\n                  headers: this.headers\n                }).then( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.t0 = types_1.GatekeeperAPIStatus[types_1.GatekeeperAPIStatus[response.status]];\n                            _context.next = 3;\n                            return response.json();\n                          case 3:\n                            _context.t1 = _context.sent;\n                            return _context.abrupt(\"return\", {\n                              state: _context.t0,\n                              payload: _context.t1\n                            });\n                          case 5:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n                  return function (_x2) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getGatekeeperRecordWithPayload(_x) {\n        return _getGatekeeperRecordWithPayload.apply(this, arguments);\n      }\n      return getGatekeeperRecordWithPayload;\n    }()\n  }, {\n    key: \"getGatekeeperStatus\",\n    value: function () {\n      var _getGatekeeperStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(walletAddress) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.fetchWithRetry(this.urlForWallet(walletAddress), {\n                  method: 'HEAD',\n                  headers: this.headers\n                }).then(function (_ref4) {\n                  var status = _ref4.status;\n                  return status;\n                }));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getGatekeeperStatus(_x3) {\n        return _getGatekeeperStatus.apply(this, arguments);\n      }\n      return getGatekeeperStatus;\n    }()\n  }, {\n    key: \"requestGatewayTokenFromGatekeeper\",\n    value: function () {\n      var _requestGatewayTokenFromGatekeeper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref5) {\n        var wallet, payload, proof, ownerSigns, body, url;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                wallet = _ref5.wallet, payload = _ref5.payload, proof = _ref5.proof, ownerSigns = _ref5.ownerSigns;\n                // produce a signature that proves ownership of a wallet\n                logger_1.default.debug('requestGatewayTokenFromGatekeeper request', Object.assign(Object.assign({}, payload), {\n                  proof: proof\n                }));\n                // We only pass the wallet public key as part of the request if\n                // it was not passed as part of the presentation.\n                body = Object.assign(Object.assign({}, payload), {\n                  proof: proof,\n                  address: wallet.publicKey,\n                  ownerSigns: ownerSigns\n                });\n                logger_1.default.debug('requestGatewayTokenFromGatekeeper Requesting a new gatekeeper token...', body);\n                url = new URL(this.baseUrl);\n                this.addQueryParams(url);\n                return _context5.abrupt(\"return\", this.fetchWithRetry(url.toString(), {\n                  method: 'POST',\n                  headers: Object.assign(Object.assign({}, this.headers), {\n                    'Content-Type': 'application/json'\n                  }),\n                  body: JSON.stringify(body)\n                }).then( /*#__PURE__*/function () {\n                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(resp) {\n                    var status, result;\n                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            status = resp.status;\n                            _context4.next = 3;\n                            return resp.json();\n                          case 3:\n                            result = _context4.sent;\n                            return _context4.abrupt(\"return\", Object.assign(Object.assign({}, result), {\n                              status: status\n                            }));\n                          case 5:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n                  return function (_x5) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }()));\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function requestGatewayTokenFromGatekeeper(_x4) {\n        return _requestGatewayTokenFromGatekeeper.apply(this, arguments);\n      }\n      return requestGatewayTokenFromGatekeeper;\n    }()\n    /**\n     * Tries to refresh a token.\n     * If it fails with a 5xx, handleFetchError will retry a number of times.\n     */\n  }, {\n    key: \"refreshToken\",\n    value: function () {\n      var _refreshToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(_ref7) {\n        var wallet, payload, proof, ownerSigns, body;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                wallet = _ref7.wallet, payload = _ref7.payload, proof = _ref7.proof, ownerSigns = _ref7.ownerSigns;\n                logger_1.default.debug('refreshToken...', {\n                  payload: payload\n                });\n                logger_1.default.debug('Attempting to refresh the Gateway token');\n                body = Object.assign(Object.assign({}, payload), {\n                  proof: proof,\n                  request: 'refresh',\n                  ownerSigns: ownerSigns\n                });\n                return _context7.abrupt(\"return\", this.fetchWithRetry(this.urlForWallet(wallet.publicKey), {\n                  method: 'PATCH',\n                  headers: Object.assign(Object.assign({}, this.headers), {\n                    'Content-Type': 'application/json'\n                  }),\n                  body: JSON.stringify(body)\n                }).then( /*#__PURE__*/function () {\n                  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(resp) {\n                    var status, result;\n                    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            status = resp.status;\n                            _context6.next = 3;\n                            return resp.json();\n                          case 3:\n                            result = _context6.sent;\n                            return _context6.abrupt(\"return\", Object.assign(Object.assign({}, result), {\n                              status: status\n                            }));\n                          case 5:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n                  return function (_x7) {\n                    return _ref8.apply(this, arguments);\n                  };\n                }()));\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function refreshToken(_x6) {\n        return _refreshToken.apply(this, arguments);\n      }\n      return refreshToken;\n    }()\n  }]);\n  return GatekeeperClient;\n}();\nexports.default = GatekeeperClient;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","fetch_retry_ts_1","require","types_1","logger_1","config_1","testRetryMultipler","parseFloat","process","env","TEST_RETRY_MULTIPLIER","GatekeeperClient","gatekeeperClientConfig","baseUrl","stage","queryParams","headers","fetchImplementation","fetch","defaultRetryParams","retries","numRetries","getDefaultApiNumRetries","retryOn","attempt","error","response","status","retryDelay","fetchWithRetry","default","url","entries","forEach","key","searchParams","append","walletAddress","URL","addQueryParams","toString","urlForWallet","method","then","GatekeeperAPIStatus","json","state","payload","wallet","proof","ownerSigns","debug","assign","body","address","publicKey","JSON","stringify","resp","result","request"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@civic/common-gateway-react/dist/esm/utils/gatekeeperClient.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fetch_retry_ts_1 = __importDefault(require(\"fetch-retry-ts\"));\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst config_1 = require(\"../config\");\nconst testRetryMultipler = () => parseFloat(process.env.TEST_RETRY_MULTIPLIER || '') || 1;\nclass GatekeeperClient {\n    constructor(gatekeeperClientConfig) {\n        this.baseUrl = gatekeeperClientConfig.baseUrl;\n        this.stage = gatekeeperClientConfig.stage;\n        this.queryParams = gatekeeperClientConfig.queryParams;\n        this.headers = gatekeeperClientConfig.headers;\n        this.fetchImplementation = gatekeeperClientConfig.fetchImplementation || fetch;\n        // By default retry on every 5xx or other Error (e.g. network failure):\n        this.defaultRetryParams = {\n            retries: gatekeeperClientConfig.numRetries || (0, config_1.getDefaultApiNumRetries)(this.stage),\n            retryOn: (attempt, retries, error, response) => attempt < retries && (!!error || !response || response.status >= 500),\n            retryDelay: (attempt) => 2 ** attempt * 1000 * testRetryMultipler(),\n        };\n        this.fetchWithRetry = (0, fetch_retry_ts_1.default)(this.fetchImplementation, this.defaultRetryParams);\n    }\n    addQueryParams(url) {\n        if (!this.queryParams)\n            return;\n        Object.entries(this.queryParams).forEach(([key, value]) => {\n            url.searchParams.append(key, value);\n        });\n    }\n    urlForWallet(walletAddress) {\n        const url = new URL(`${this.baseUrl}/${walletAddress}`);\n        this.addQueryParams(url);\n        return url.toString();\n    }\n    async getGatekeeperRecordWithPayload(walletAddress) {\n        return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n            method: 'GET',\n            headers: this.headers,\n        }).then(async (response) => ({\n            state: types_1.GatekeeperAPIStatus[types_1.GatekeeperAPIStatus[response.status]],\n            payload: await response.json(),\n        }));\n    }\n    async getGatekeeperStatus(walletAddress) {\n        return this.fetchWithRetry(this.urlForWallet(walletAddress), {\n            method: 'HEAD',\n            headers: this.headers,\n        }).then(({ status }) => status);\n    }\n    async requestGatewayTokenFromGatekeeper({ wallet, payload, proof, ownerSigns, }) {\n        // produce a signature that proves ownership of a wallet\n        logger_1.default.debug('requestGatewayTokenFromGatekeeper request', Object.assign(Object.assign({}, payload), { proof }));\n        // We only pass the wallet public key as part of the request if\n        // it was not passed as part of the presentation.\n        const body = Object.assign(Object.assign({}, payload), { proof, address: wallet.publicKey, ownerSigns });\n        logger_1.default.debug('requestGatewayTokenFromGatekeeper Requesting a new gatekeeper token...', body);\n        const url = new URL(this.baseUrl);\n        this.addQueryParams(url);\n        return this.fetchWithRetry(url.toString(), {\n            method: 'POST',\n            headers: Object.assign(Object.assign({}, this.headers), { 'Content-Type': 'application/json' }),\n            body: JSON.stringify(body),\n        }).then(async (resp) => {\n            const { status } = resp;\n            const result = (await resp.json());\n            return Object.assign(Object.assign({}, result), { status });\n        });\n    }\n    /**\n     * Tries to refresh a token.\n     * If it fails with a 5xx, handleFetchError will retry a number of times.\n     */\n    async refreshToken({ wallet, payload, proof, ownerSigns, }) {\n        logger_1.default.debug('refreshToken...', { payload });\n        logger_1.default.debug('Attempting to refresh the Gateway token');\n        const body = Object.assign(Object.assign({}, payload), { proof, request: 'refresh', ownerSigns });\n        return this.fetchWithRetry(this.urlForWallet(wallet.publicKey), {\n            method: 'PATCH',\n            headers: Object.assign(Object.assign({}, this.headers), { 'Content-Type': 'application/json' }),\n            body: JSON.stringify(body),\n        }).then(async (resp) => {\n            const { status } = resp;\n            const result = (await resp.json());\n            return Object.assign(Object.assign({}, result), { status });\n        });\n    }\n}\nexports.default = GatekeeperClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}