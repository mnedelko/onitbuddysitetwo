{"ast":null,"code":"import { SystemInstruction, clusterApiUrl, Transaction, SystemProgram, Connection } from '@solana/web3.js';\nimport { encode } from 'bs58';\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\nvar runtime_1 = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var runtime = function (exports) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    function define(obj, key, value) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n      return obj[key];\n    }\n    try {\n      // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n      define({}, \"\");\n    } catch (err) {\n      define = function define(obj, key, value) {\n        return obj[key] = value;\n      };\n    }\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []);\n\n      // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n    exports.wrap = wrap;\n\n    // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\";\n\n    // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n    var ContinueSentinel = {};\n\n    // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n\n    // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n    var IteratorPrototype = {};\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\");\n\n    // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        define(prototype, method, function (arg) {\n          return this._invoke(method, arg);\n        });\n      });\n    }\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction ||\n      // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n      }\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    };\n\n    // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n      var previousPromise;\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,\n        // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n\n      // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n      this._invoke = enqueue;\n    }\n    defineIteratorMethods(AsyncIterator.prototype);\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n    exports.AsyncIterator = AsyncIterator;\n\n    // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          }\n\n          // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n          return doneResult();\n        }\n        context.method = method;\n        context.arg = arg;\n        while (true) {\n          var delegate = context.delegate;\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted;\n            // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    }\n\n    // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n        return ContinueSentinel;\n      }\n      var record = tryCatch(method, delegate.iterator, context.arg);\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n      var info = record.arg;\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value;\n\n        // Resume execution at the desired location (see delegateYield).\n        context.next = delegate.nextLoc;\n\n        // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      }\n\n      // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\");\n\n    // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n    Gp.toString = function () {\n      return \"[object Generator]\";\n    };\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n      this.tryEntries.push(entry);\n    }\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n    exports.keys = function (object) {\n      var keys = [];\n      for (var key in object) {\n        keys.push(key);\n      }\n      keys.reverse();\n\n      // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        }\n\n        // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n        next.done = true;\n        return next;\n      };\n    };\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n            next = function next() {\n              while (++i < iterable.length) {\n                if (hasOwn.call(iterable, i)) {\n                  next.value = iterable[i];\n                  next.done = false;\n                  return next;\n                }\n              }\n              next.value = undefined$1;\n              next.done = true;\n              return next;\n            };\n          return next.next = next;\n        }\n      }\n\n      // Return an iterator with no values.\n      return {\n        next: doneResult\n      };\n    }\n    exports.values = values;\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n    Context.prototype = {\n      constructor: Context,\n      reset: function reset(skipTempReset) {\n        this.prev = 0;\n        this.next = 0;\n        // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function stop() {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n        return this.rval;\n      },\n      dispatchException: function dispatchException(exception) {\n        if (this.done) {\n          throw exception;\n        }\n        var context = this;\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n          return !!caught;\n        }\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function abrupt(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n        return this.complete(record);\n      },\n      complete: function complete(record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n        return ContinueSentinel;\n      },\n      finish: function finish(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function _catch(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n            return thrown;\n          }\n        }\n\n        // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n        return ContinueSentinel;\n      }\n    };\n\n    // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n    return exports;\n  }(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports);\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n});\nvar defaultSigner = function defaultSigner(keypair) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(transaction) {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              transaction.sign(keypair);\n              return _context.abrupt(\"return\", transaction);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nvar isKeypair = function isKeypair(k) {\n  return k.constructor.name === 'Keypair';\n};\nvar pubkeyOf = function pubkeyOf(k) {\n  return isKeypair(k) ? k.publicKey : k;\n};\nvar DEFAULT_CONFIG = {\n  cluster: 'mainnet-beta',\n  commitment: 'confirmed',\n  supportedClusterUrls: {},\n  recentBlockCheck: true,\n  broadcastCheck: true\n}; // get the solana cluster URL to connect to. Use the cluster in the config,\n// unless overridden. If the cluster is referenced in supportedClusterUrls,\n// use the clusterUrl specified there, otherwise use the default solana one\n\nvar getClusterUrl = function getClusterUrl(config) {\n  if (config.supportedClusterUrls && config.supportedClusterUrls[config.cluster]) {\n    return config.supportedClusterUrls[config.cluster];\n  }\n  return clusterApiUrl(config.cluster);\n};\nvar makeTransaction = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(connection, fromPubkey, toPubkey, amount) {\n    var instruction, _yield$connection$get, blockhash, tx;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            instruction = SystemProgram.transfer({\n              fromPubkey: fromPubkey,\n              lamports: amount,\n              toPubkey: toPubkey\n            });\n            _context2.next = 3;\n            return connection.getLatestBlockhash();\n          case 3:\n            _yield$connection$get = _context2.sent;\n            blockhash = _yield$connection$get.blockhash;\n            tx = new Transaction({\n              recentBlockhash: blockhash,\n              feePayer: fromPubkey\n            }).add(instruction);\n            return _context2.abrupt(\"return\", tx);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function makeTransaction(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar findBlock = /*#__PURE__*/function () {\n  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(connection, blockhash) {\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", connection.getFeeCalculatorForBlockhash(blockhash, 'confirmed').then(function (result) {\n              if (!result.value) throw new Error('Block was not found'); // if we were interested in the age of the block,\n              // we could check the value of result.context.slot here and use getBlock() to look it up\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function findBlock(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar checkRecentBlock = /*#__PURE__*/function () {\n  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(connection, transaction) {\n    return runtime_1.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (transaction.recentBlockhash) {\n              _context4.next = 2;\n              break;\n            }\n            throw new Error('Transaction has no recent blockhash!');\n          case 2:\n            _context4.next = 4;\n            return findBlock(connection, transaction.recentBlockhash);\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return function checkRecentBlock(_x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar findTransaction = /*#__PURE__*/function () {\n  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(connection, transaction) {\n    var txSig;\n    return runtime_1.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (transaction.signature) {\n              _context5.next = 2;\n              break;\n            }\n            throw new Error('Transaction has no signature');\n          case 2:\n            txSig = encode(transaction.signature);\n            return _context5.abrupt(\"return\", connection.getTransaction(txSig));\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return function findTransaction(_x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar checkTransactionNotBroadcast = /*#__PURE__*/function () {\n  var _ref6 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(connection, transaction) {\n    return runtime_1.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", findTransaction(connection, transaction).then(function (result) {\n              if (result) throw new Error('Transaction was broadcast!');\n            }));\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return function checkTransactionNotBroadcast(_x12, _x13) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar checkTransactionParameters = function checkTransactionParameters(transaction) {\n  if (transaction.instructions.length !== 1) throw new Error('Incorrect instruction count. The transaction must contain only one Transfer instruction');\n  var _transaction$instruct = transaction.instructions,\n    instruction = _transaction$instruct[0];\n  var transferParams;\n  try {\n    transferParams = SystemInstruction.decodeTransfer(instruction);\n  } catch (error) {\n    console.log(error);\n    throw new Error('Invalid instruction. The transaction must contain a Transfer instruction');\n  }\n  if (!transferParams.fromPubkey.equals(transferParams.toPubkey)) throw new Error('The transaction must be self-to-self');\n  if (BigInt(transferParams.lamports) !== BigInt(0)) throw new Error('The transaction must have zero value');\n};\nvar checkSignatures = function checkSignatures(transaction, publicKey) {\n  if (!transaction.verifySignatures()) {\n    // some expected signature is missing\n    throw new Error('Signatures not verified');\n  }\n  var signatureForExpectedKey = transaction.signatures.find(function (signaturePubkeyPair) {\n    return signaturePubkeyPair.publicKey.equals(publicKey);\n  });\n  if (!signatureForExpectedKey) {\n    throw new Error('Missing signature for ' + publicKey.toBase58());\n  }\n};\nvar prove = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(key, signer, config) {\n    var sign, connection, publicKey, transaction, signedTransaction;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (config === void 0) {\n              config = DEFAULT_CONFIG;\n            }\n            if (!(isKeypair(key) && signer)) {\n              _context.next = 3;\n              break;\n            }\n            throw new Error('Provide a keypair or a signer, not both');\n          case 3:\n            if (!(!isKeypair(key) && !signer)) {\n              _context.next = 5;\n              break;\n            }\n            throw new Error('Provide either a keypair or a signer');\n          case 5:\n            sign = signer || defaultSigner(key);\n            connection = config.connection || new Connection(getClusterUrl(config), config.commitment);\n            publicKey = pubkeyOf(key);\n            _context.next = 10;\n            return makeTransaction(connection, publicKey, publicKey, 0);\n          case 10:\n            transaction = _context.sent;\n            _context.next = 13;\n            return sign(transaction);\n          case 13:\n            signedTransaction = _context.sent;\n            return _context.abrupt(\"return\", signedTransaction.serialize());\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function prove(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar verifyStatic = function verifyStatic(evidence, publicKey) {\n  var transaction = Transaction.from(evidence);\n  checkSignatures(transaction, publicKey);\n  checkTransactionParameters(transaction);\n};\nvar verify = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(evidence, publicKey, config) {\n    var transaction, connection, checkTransactionNotBroadcastPromise, checkBlockPromise;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (config === void 0) {\n              config = DEFAULT_CONFIG;\n            }\n            verifyStatic(evidence, publicKey);\n            transaction = Transaction.from(evidence);\n            connection = config.connection || new Connection(getClusterUrl(config), config.commitment);\n            checkTransactionNotBroadcastPromise = config.broadcastCheck ? checkTransactionNotBroadcast(connection, transaction) : Promise.resolve();\n            checkBlockPromise = config.recentBlockCheck ? checkRecentBlock(connection, transaction) : Promise.resolve();\n            _context2.next = 8;\n            return Promise.all([checkTransactionNotBroadcastPromise, checkBlockPromise]);\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function verify(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport { DEFAULT_CONFIG, prove, verify, verifyStatic };","map":{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../src/utilities.ts","../src/index.ts"],"names":["undefined","defaultSigner","keypair","transaction","sign","isKeypair","k","constructor","name","pubkeyOf","publicKey","DEFAULT_CONFIG","cluster","commitment","supportedClusterUrls","recentBlockCheck","broadcastCheck","getClusterUrl","config","clusterApiUrl","makeTransaction","connection","fromPubkey","toPubkey","amount","instruction","transfer","lamports","blockhash","getLatestBlockhash","tx","Transaction","recentBlockhash","feePayer","add","findBlock","getFeeCalculatorForBlockhash","then","result","value","Error","checkRecentBlock","findTransaction","signature","txSig","encode","getTransaction","checkTransactionNotBroadcast","checkTransactionParameters","instructions","length","transferParams","SystemInstruction","decodeTransfer","error","console","log","equals","BigInt","checkSignatures","verifySignatures","signatureForExpectedKey","signatures","find","signaturePubkeyPair","toBase58","prove","key","signer","Connection","signedTransaction","serialize","verifyStatic","evidence","from","verify","checkTransactionNotBroadcastPromise","Promise","resolve","checkBlockPromise","all"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import {\n  Cluster,\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemInstruction,\n  SystemProgram,\n  Transaction,\n  TransactionResponse,\n} from '@solana/web3.js';\nimport { encode } from 'bs58';\n\nexport type SignCallback = (transaction: Transaction) => Promise<Transaction>;\nexport const defaultSigner = (keypair: Keypair): SignCallback => async (\n  transaction: Transaction\n) => {\n  transaction.sign(keypair);\n  return transaction;\n};\n\ntype KeyMaterial = Keypair | PublicKey;\nexport const isKeypair = (k: KeyMaterial): k is Keypair =>\n  k.constructor.name === 'Keypair';\nexport const pubkeyOf = (k: KeyMaterial): PublicKey =>\n  isKeypair(k) ? k.publicKey : k;\n\nexport type ClusterUrlMap = Record<string, string>;\n\nexport type Config = {\n  // the cluster that should be used when generating and verifying proofs\n  cluster: string;\n  // when checking that a proof transaction has not been transmitted, the commitment\n  // to be used, i.e. the degree to which the transaction is finalised by the network\n  commitment: Commitment;\n  // if the cluster is not a standard solana public cluster, this map provides\n  // the cluster URL to connect to. Use this when the proof may contain a cluster that is\n  // not recognised by solana's clusterApiUrl function\n  supportedClusterUrls?: ClusterUrlMap;\n  // If true, check that the transaction includes a recent blockhash.\n  // Disable if nodes are having difficulty synchronising,\n  // warning - this makes replay attacks easier as proofs remain valid longer\n  recentBlockCheck: boolean;\n  // If true, check that the transaction has not been broadcast.\n  // Disable if it is taking too long to check.\n  // warning - this allows attackers to use replay attacks by looking up a transaction on chain and\n  // using it as proof without having the private key\n  broadcastCheck: boolean;\n  /// If set, use this connection rather than creating a new one - ignores cluster, commitment, supportedClusterUrls\n  connection?: Connection;\n};\n\nexport const DEFAULT_CONFIG: Config = {\n  cluster: 'mainnet-beta',\n  commitment: 'confirmed',\n  supportedClusterUrls: {},\n  recentBlockCheck: true,\n  broadcastCheck: true,\n};\n\n// get the solana cluster URL to connect to. Use the cluster in the config,\n// unless overridden. If the cluster is referenced in supportedClusterUrls,\n// use the clusterUrl specified there, otherwise use the default solana one\nexport const getClusterUrl = (config: Config) => {\n  if (\n    config.supportedClusterUrls &&\n    config.supportedClusterUrls[config.cluster]\n  ) {\n    return config.supportedClusterUrls[config.cluster];\n  }\n  return clusterApiUrl(config.cluster as Cluster);\n};\n\nexport const makeTransaction = async (\n  connection: Connection,\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  amount: number\n): Promise<Transaction> => {\n  const instruction = SystemProgram.transfer({\n    fromPubkey,\n    lamports: amount,\n    toPubkey,\n  });\n\n  const { blockhash } = await connection.getLatestBlockhash();\n  const tx = new Transaction({\n    recentBlockhash: blockhash,\n    feePayer: fromPubkey,\n  }).add(instruction);\n  return tx;\n};\n\nconst findBlock = async (\n  connection: Connection,\n  blockhash: string\n): Promise<void> =>\n  connection\n    .getFeeCalculatorForBlockhash(blockhash, 'confirmed')\n    .then(result => {\n      if (!result.value) throw new Error('Block was not found');\n      // if we were interested in the age of the block,\n      // we could check the value of result.context.slot here and use getBlock() to look it up\n    });\n\nexport const checkRecentBlock = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<void> => {\n  if (!transaction.recentBlockhash)\n    throw new Error('Transaction has no recent blockhash!');\n  await findBlock(connection, transaction.recentBlockhash);\n};\n\nconst findTransaction = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<TransactionResponse | null> => {\n  if (!transaction.signature) {\n    throw new Error('Transaction has no signature');\n  }\n  const txSig = encode(transaction.signature);\n  return connection.getTransaction(txSig);\n};\n\nexport const checkTransactionNotBroadcast = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<void> =>\n  findTransaction(connection, transaction).then(result => {\n    if (result) throw new Error('Transaction was broadcast!');\n  });\n\nexport const checkTransactionParameters = (transaction: Transaction) => {\n  if (transaction.instructions.length !== 1)\n    throw new Error(\n      'Incorrect instruction count. The transaction must contain only one Transfer instruction'\n    );\n\n  const [instruction] = transaction.instructions;\n\n  let transferParams;\n  try {\n    transferParams = SystemInstruction.decodeTransfer(instruction);\n  } catch (error) {\n    console.log(error);\n    throw new Error(\n      'Invalid instruction. The transaction must contain a Transfer instruction'\n    );\n  }\n\n  if (!transferParams.fromPubkey.equals(transferParams.toPubkey))\n    throw new Error('The transaction must be self-to-self');\n  if (BigInt(transferParams.lamports) !== BigInt(0))\n    throw new Error('The transaction must have zero value');\n};\n\nexport const checkSignatures = (\n  transaction: Transaction,\n  publicKey: PublicKey\n) => {\n  if (!transaction.verifySignatures()) {\n    // some expected signature is missing\n    throw new Error('Signatures not verified');\n  }\n  const signatureForExpectedKey = transaction.signatures.find(\n    signaturePubkeyPair => signaturePubkeyPair.publicKey.equals(publicKey)\n  );\n  if (!signatureForExpectedKey) {\n    throw new Error('Missing signature for ' + publicKey.toBase58());\n  }\n};\n","import { Connection, Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport {\n  checkRecentBlock,\n  checkSignatures,\n  checkTransactionNotBroadcast,\n  checkTransactionParameters,\n  Config,\n  DEFAULT_CONFIG,\n  defaultSigner,\n  getClusterUrl,\n  isKeypair,\n  makeTransaction,\n  pubkeyOf,\n  SignCallback,\n} from './utilities';\n\nexport { SignCallback, Config, DEFAULT_CONFIG } from './utilities';\n\nexport const prove = async (\n  key: PublicKey | Keypair,\n  signer?: SignCallback,\n  config: Config = DEFAULT_CONFIG\n): Promise<Buffer> => {\n  if (isKeypair(key) && signer)\n    throw new Error('Provide a keypair or a signer, not both');\n  if (!isKeypair(key) && !signer)\n    throw new Error('Provide either a keypair or a signer');\n  const sign = signer || defaultSigner(key as Keypair);\n\n  const connection =\n    config.connection ||\n    new Connection(getClusterUrl(config), config.commitment);\n\n  const publicKey = pubkeyOf(key);\n\n  const transaction = await makeTransaction(\n    connection,\n    publicKey,\n    publicKey,\n    0\n  );\n  const signedTransaction = await sign(transaction);\n  return signedTransaction.serialize();\n};\n\nexport const verifyStatic = (evidence: Buffer, publicKey: PublicKey): void => {\n  const transaction = Transaction.from(evidence);\n\n  checkSignatures(transaction, publicKey);\n  checkTransactionParameters(transaction);\n};\n\nexport const verify = async (\n  evidence: Buffer,\n  publicKey: PublicKey,\n  config: Config = DEFAULT_CONFIG\n): Promise<void> => {\n  verifyStatic(evidence, publicKey);\n\n  const transaction = Transaction.from(evidence);\n\n  const connection =\n    config.connection ||\n    new Connection(getClusterUrl(config), config.commitment);\n\n  const checkTransactionNotBroadcastPromise = config.broadcastCheck\n    ? checkTransactionNotBroadcast(connection, transaction)\n    : Promise.resolve();\n\n  const checkBlockPromise = config.recentBlockCheck\n    ? checkRecentBlock(connection, transaction)\n    : Promise.resolve();\n\n  await Promise.all([checkTransactionNotBroadcastPromise, checkBlockPromise]);\n};\n"]},"metadata":{},"sourceType":"module"}