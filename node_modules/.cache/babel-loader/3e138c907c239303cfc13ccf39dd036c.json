{"ast":null,"code":"import { useRef } from 'react';\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\nexport default function useStableMemo(factory, deps) {\n  var isValid = true;\n  var valueRef = useRef(); // initial hook call\n\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps: deps,\n      result: factory()\n    }; // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n  var cache = isValid ? valueRef.current : {\n    deps: deps,\n    result: factory()\n  }; // must update immediately so any sync renders here don't cause an infinite loop\n\n  valueRef.current = cache;\n  return cache.result;\n}","map":{"version":3,"names":["useRef","isEqual","a","b","length","i","useStableMemo","factory","deps","isValid","valueRef","current","result","cache"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@restart/hooks/esm/useStableMemo.js"],"sourcesContent":["import { useRef } from 'react';\n\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\nexport default function useStableMemo(factory, deps) {\n  var isValid = true;\n  var valueRef = useRef(); // initial hook call\n\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps: deps,\n      result: factory()\n    }; // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n\n  var cache = isValid ? valueRef.current : {\n    deps: deps,\n    result: factory()\n  }; // must update immediately so any sync renders here don't cause an infinite loop\n\n  valueRef.current = cache;\n  return cache.result;\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAE9B,SAASC,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAE;EACrB,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE,OAAO,KAAK;EAEvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IACjC,IAAIH,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE;MACjB,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,aAAa,CAACC,OAAO,EAAEC,IAAI,EAAE;EACnD,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,QAAQ,GAAGV,MAAM,EAAE,CAAC,CAAC;;EAEzB,IAAI,CAACU,QAAQ,CAACC,OAAO,EAAE;IACrBD,QAAQ,CAACC,OAAO,GAAG;MACjBH,IAAI,EAAEA,IAAI;MACVI,MAAM,EAAEL,OAAO;IACjB,CAAC,CAAC,CAAC;EACL,CAAC,MAAM;IACLE,OAAO,GAAG,CAAC,EAAED,IAAI,IAAIE,QAAQ,CAACC,OAAO,CAACH,IAAI,IAAIP,OAAO,CAACO,IAAI,EAAEE,QAAQ,CAACC,OAAO,CAACH,IAAI,CAAC,CAAC;EACrF;EAEA,IAAIK,KAAK,GAAGJ,OAAO,GAAGC,QAAQ,CAACC,OAAO,GAAG;IACvCH,IAAI,EAAEA,IAAI;IACVI,MAAM,EAAEL,OAAO;EACjB,CAAC,CAAC,CAAC;;EAEHG,QAAQ,CAACC,OAAO,GAAGE,KAAK;EACxB,OAAOA,KAAK,CAACD,MAAM;AACrB"},"metadata":{},"sourceType":"module"}