{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GatewayTokenActionCreatorImplementation = void 0;\n/* eslint-disable @typescript-eslint/no-unused-vars */\nvar types_1 = require(\"../types\");\nvar logger_1 = __importDefault(require(\"../logger\"));\nvar utils_1 = require(\"./utils\");\nvar GatewayTokenActionCreatorImplementation = function GatewayTokenActionCreatorImplementation(_ref) {\n  var wallet = _ref.wallet,\n    chainImplementation = _ref.chainImplementation,\n    gatekeeperClient = _ref.gatekeeperClient,\n    dispatch = _ref.dispatch,\n    networkConfig = _ref.networkConfig,\n    ownerSigns = _ref.ownerSigns;\n  var logDebug = function logDebug(message) {\n    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger_1.default.debug(\"[useChain] \".concat(message), obj);\n  };\n  var logError = function logError(message) {\n    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return logger_1.default.error(\"[useChain] \".concat(message), obj);\n  };\n  var isTokenCreated = function isTokenCreated(code) {\n    return code === types_1.GatekeeperAPIStatus.ISSUED;\n  };\n  var isTokenPending = function isTokenPending(code) {\n    return code === types_1.GatekeeperAPIStatus.REQUESTED;\n  };\n  var isRequestedRetriesExhausted = function isRequestedRetriesExhausted(code) {\n    return code === types_1.GatekeeperAPIStatus.REQUESTED_RETRIES_EXHAUSTED;\n  };\n  var isFailure = function isFailure(code) {\n    return !isTokenPending(code) && !isRequestedRetriesExhausted(code) && code >= 400;\n  };\n  var pollForActiveOnChainToken = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var pollChainNumberRetries,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pollChainNumberRetries = _args.length > 0 && _args[0] !== undefined ? _args[0] : networkConfig.pollChainNumberRetries;\n              return _context.abrupt(\"return\", (0, utils_1.pollUntilConditionMet)(chainImplementation.findGatewayToken, function (onChainToken) {\n                if (!onChainToken) return false; // keep polling\n                if (!onChainToken.expiryTime) return true;\n                if (onChainToken.state === types_1.State.ACTIVE) return true;\n                throw new Error('Token found but not ACTIVE');\n              }, networkConfig.pollChainIntervalMilliseconds, pollChainNumberRetries));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function pollForActiveOnChainToken() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var waitForGatewayToken = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var pollChainNumberRetries,\n        token,\n        gkApiStatus,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              pollChainNumberRetries = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : networkConfig.pollChainNumberRetries;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return pollForActiveOnChainToken(pollChainNumberRetries);\n            case 4:\n              token = _context2.sent;\n              logDebug('Result from pollForActiveOnChainToken', token);\n              if (token) {\n                _context2.next = 9;\n                break;\n              }\n              logError('Token not found onChain');\n              throw new Error('Token not found onChain');\n            case 9:\n              dispatch({\n                type: 'tokenChange',\n                token: token\n              });\n              dispatch({\n                type: 'civicPass_check_token_status',\n                token: token\n              });\n              return _context2.abrupt(\"return\");\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](1);\n              logError('Error polling for active token on chain', _context2.t0);\n              // If owner signs is true then fail the flow without checking the gatekeeper\n              if (!ownerSigns) {\n                _context2.next = 21;\n                break;\n              }\n              logError('Failed to find Gateway token on-chain with ownerSigns:true, failing');\n              dispatch({\n                type: 'civicPass_owner_transaction_timeout'\n              });\n              return _context2.abrupt(\"return\");\n            case 21:\n              logError('Failed to find Gateway token on-chain with ownerSigns:false, checking with gatekeeper');\n              _context2.next = 24;\n              return gatekeeperClient().getGatekeeperStatus(wallet.publicKey);\n            case 24:\n              gkApiStatus = _context2.sent;\n              if (!isRequestedRetriesExhausted(gkApiStatus)) {\n                _context2.next = 29;\n                break;\n              }\n              logError('Retried exhausted', {\n                gkApiStatus: gkApiStatus\n              });\n              dispatch({\n                type: 'civicPass_requested_retries_exhausted'\n              });\n              return _context2.abrupt(\"return\");\n            case 29:\n              if (!isTokenPending(gkApiStatus)) {\n                _context2.next = 32;\n                break;\n              }\n              _context2.next = 32;\n              return waitForGatewayToken(3);\n            case 32:\n              // retries have been exhausted and we still don't have a token\n              // or the gatekeeper threw an error during issuance attempt\n              if (isTokenCreated(gkApiStatus) || isFailure(gkApiStatus)) {\n                logError('Failed to find Gateway token with gatekeeper status code', types_1.GatekeeperAPIStatus[gkApiStatus]);\n                dispatch({\n                  type: 'tokenNotFoundError'\n                });\n              }\n            case 33:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 14]]);\n    }));\n    return function waitForGatewayToken() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    waitForGatewayToken: waitForGatewayToken\n  };\n};\nexports.GatewayTokenActionCreatorImplementation = GatewayTokenActionCreatorImplementation;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","GatewayTokenActionCreatorImplementation","types_1","require","logger_1","utils_1","wallet","chainImplementation","gatekeeperClient","dispatch","networkConfig","ownerSigns","logDebug","message","obj","default","debug","logError","error","isTokenCreated","code","GatekeeperAPIStatus","ISSUED","isTokenPending","REQUESTED","isRequestedRetriesExhausted","REQUESTED_RETRIES_EXHAUSTED","isFailure","pollForActiveOnChainToken","pollChainNumberRetries","pollUntilConditionMet","findGatewayToken","onChainToken","expiryTime","state","State","ACTIVE","Error","pollChainIntervalMilliseconds","waitForGatewayToken","token","type","getGatekeeperStatus","publicKey","gkApiStatus"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@civic/common-gateway-react/dist/esm/actionCreator/gatewayToken.actionCreator.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GatewayTokenActionCreatorImplementation = void 0;\n/* eslint-disable @typescript-eslint/no-unused-vars */\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst utils_1 = require(\"./utils\");\nconst GatewayTokenActionCreatorImplementation = ({ wallet, chainImplementation, gatekeeperClient, dispatch, networkConfig, ownerSigns, }) => {\n    const logDebug = (message, obj = null) => logger_1.default.debug(`[useChain] ${message}`, obj);\n    const logError = (message, obj = null) => logger_1.default.error(`[useChain] ${message}`, obj);\n    const isTokenCreated = (code) => code === types_1.GatekeeperAPIStatus.ISSUED;\n    const isTokenPending = (code) => code === types_1.GatekeeperAPIStatus.REQUESTED;\n    const isRequestedRetriesExhausted = (code) => code === types_1.GatekeeperAPIStatus.REQUESTED_RETRIES_EXHAUSTED;\n    const isFailure = (code) => !isTokenPending(code) && !isRequestedRetriesExhausted(code) && code >= 400;\n    const pollForActiveOnChainToken = async (pollChainNumberRetries = networkConfig.pollChainNumberRetries) => {\n        return (0, utils_1.pollUntilConditionMet)(chainImplementation.findGatewayToken, (onChainToken) => {\n            if (!onChainToken)\n                return false; // keep polling\n            if (!onChainToken.expiryTime)\n                return true;\n            if (onChainToken.state === types_1.State.ACTIVE)\n                return true;\n            throw new Error('Token found but not ACTIVE');\n        }, networkConfig.pollChainIntervalMilliseconds, pollChainNumberRetries);\n    };\n    const waitForGatewayToken = async (pollChainNumberRetries = networkConfig.pollChainNumberRetries) => {\n        // poll the blockchain until we have a status for a created record\n        // if ownerSigns is false, then poll the gatekeeper for a active tokenChange\n        // if we don't get a created token, then we consider it a failure\n        try {\n            const token = await pollForActiveOnChainToken(pollChainNumberRetries);\n            logDebug('Result from pollForActiveOnChainToken', token);\n            if (!token) {\n                logError('Token not found onChain');\n                throw new Error('Token not found onChain');\n            }\n            dispatch({ type: 'tokenChange', token });\n            dispatch({ type: 'civicPass_check_token_status', token });\n            return;\n        }\n        catch (error) {\n            logError('Error polling for active token on chain', error);\n            // If owner signs is true then fail the flow without checking the gatekeeper\n            if (ownerSigns) {\n                logError('Failed to find Gateway token on-chain with ownerSigns:true, failing');\n                dispatch({ type: 'civicPass_owner_transaction_timeout' });\n                return;\n            }\n            logError('Failed to find Gateway token on-chain with ownerSigns:false, checking with gatekeeper');\n            const gkApiStatus = await gatekeeperClient().getGatekeeperStatus(wallet.publicKey);\n            if (isRequestedRetriesExhausted(gkApiStatus)) {\n                logError('Retried exhausted', { gkApiStatus });\n                dispatch({ type: 'civicPass_requested_retries_exhausted' });\n                return;\n            }\n            // if the token is still pending or in review then keep polling on-chain\n            if (isTokenPending(gkApiStatus)) {\n                // we don't want to wait the whole amount of time if we've got to here, so just 4 retries = 3 x 2 seconds, a further\n                // 6 seconds before we will ask the GK API for status again\n                await waitForGatewayToken(3);\n            }\n            // retries have been exhausted and we still don't have a token\n            // or the gatekeeper threw an error during issuance attempt\n            if (isTokenCreated(gkApiStatus) || isFailure(gkApiStatus)) {\n                logError('Failed to find Gateway token with gatekeeper status code', types_1.GatekeeperAPIStatus[gkApiStatus]);\n                dispatch({ type: 'tokenNotFoundError' });\n            }\n        }\n    };\n    return {\n        waitForGatewayToken,\n    };\n};\nexports.GatewayTokenActionCreatorImplementation = GatewayTokenActionCreatorImplementation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}