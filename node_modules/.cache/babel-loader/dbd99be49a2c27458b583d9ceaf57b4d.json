{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = require(\"react\");\nvar types_1 = require(\"../types\");\nvar logger_1 = __importDefault(require(\"../logger\"));\nvar useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nvar usePowo = function usePowo(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n    chainImplementation = _ref.chainImplementation;\n  var powoFinished = state.powoFinished,\n    walletPowoInProgress = state.walletPowoInProgress,\n    refreshInProgress = state.refreshInProgress,\n    ownerTransactionConfirmed = state.ownerTransactionConfirmed;\n  var _ref2 = (0, useWalletHooks_1.default)(wallet, state, dispatch),\n    expectWalletConnected = _ref2.expectWalletConnected;\n  /**\n   * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n   * then resolve the promise\n   */\n  var waitForConfirmPOWO = (0, react_1.useCallback)(\n  /*#__PURE__*/\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(payload) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n                payload: payload\n              });\n              expectWalletConnected();\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                logger_1.default.debug('usePowo waitForConfirmPOWO', {\n                  powoFinished: powoFinished\n                });\n                if (powoFinished) {\n                  resolve(payload);\n                }\n              }));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [powoFinished, expectWalletConnected]);\n  /**\n   * wait until the user has provided proof of wallet ownership using their connected wallet\n   * if this was triggered from the refresh flow, dispatch events to indicate progress\n   * if not, resolve a promise when the proof is ready\n   */\n  var waitForPOWO = (0, react_1.useCallback)( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) {\n      var connectedWallet;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n              connectedWallet = expectWalletConnected();\n              if (!connectedWallet) {\n                _context2.next = 5;\n                break;\n              }\n              logger_1.default.debug('usePowo waitForPOWO', {\n                payload: payload,\n                publicKey: connectedWallet.publicKey\n              });\n              return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n                  walletPowoInProgress: walletPowoInProgress,\n                  refreshInProgress: refreshInProgress\n                });\n                chainImplementation.proveWalletOwnership().then(function (proof) {\n                  resolve({\n                    proof: proof,\n                    payload: payload\n                  });\n                  dispatch({\n                    type: 'walletPowoComplete'\n                  });\n                  dispatch({\n                    type: 'civicPass_check_token_status'\n                  });\n                }).catch(function (error) {\n                  logger_1.default.error('Proof of wallet ownership error: ', error);\n                  dispatch({\n                    type: 'walletPowoIncomplete'\n                  });\n                });\n              }));\n            case 5:\n              return _context2.abrupt(\"return\", {});\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n  /**\n   * wait until the user has confirmed they want to continue the sign transaction flow\n   * then resolve the promise\n   */\n  var waitForTransactionConfirm = (0, react_1.useCallback)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            expectWalletConnected();\n            return _context3.abrupt(\"return\", new Promise(function (resolve) {\n              logger_1.default.debug('usePowo waitForTransactionConfirm', {\n                ownerTransactionConfirmed: ownerTransactionConfirmed\n              });\n              if (ownerTransactionConfirmed) {\n                resolve();\n              }\n            }));\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [ownerTransactionConfirmed, expectWalletConnected]);\n  /**\n   * wait for the user sign transaction callback and then dispatch awaiting owner transaction\n   * to set the correct status while waiting for the token on chain\n   */\n  var waitForHandleTransaction = (0, react_1.useCallback)( /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(transaction) {\n      var errorMessage, errorCode, payload;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              logger_1.default.debug('waitForHandleTransaction', transaction);\n              _context4.prev = 1;\n              _context4.next = 4;\n              return chainImplementation.handleUserSignedTransaction(transaction);\n            case 4:\n              dispatch({\n                type: 'walletPowoComplete'\n              });\n              _context4.next = 16;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](1);\n              errorMessage = _context4.t0 && _context4.t0 instanceof Error ? _context4.t0.message : 'ChainTransaction error';\n              errorCode = _context4.t0 === null || _context4.t0 === void 0 ? void 0 : _context4.t0.errorCode;\n              logger_1.default.error('waitForHandleTransaction error', {\n                errorCode: errorCode\n              });\n              payload = Object.assign({}, errorCode ? {\n                errorCode: errorCode\n              } : {});\n              logger_1.default.error('waitForHandleTransaction (error instanceof ChainError)', errorCode);\n              dispatch({\n                type: 'civicPass_owner_sends_chainTransactionError',\n                payload: payload\n              });\n              throw new types_1.ChainTransactionError(errorMessage);\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 7]]);\n    }));\n    return function (_x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), [chainImplementation]);\n  return {\n    waitForConfirmPOWO: waitForConfirmPOWO,\n    waitForTransactionConfirm: waitForTransactionConfirm,\n    waitForHandleTransaction: waitForHandleTransaction,\n    waitForPOWO: waitForPOWO\n  };\n};\nexports.default = usePowo;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","types_1","logger_1","useWalletHooks_1","usePowo","state","dispatch","wallet","chainImplementation","powoFinished","walletPowoInProgress","refreshInProgress","ownerTransactionConfirmed","default","expectWalletConnected","waitForConfirmPOWO","useCallback","payload","debug","Promise","resolve","waitForPOWO","connectedWallet","publicKey","proveWalletOwnership","then","proof","type","catch","error","waitForTransactionConfirm","waitForHandleTransaction","transaction","handleUserSignedTransaction","errorMessage","Error","message","errorCode","assign","ChainTransactionError"],"sources":["/Users/mnedelko/Library/Mobile Documents/com~apple~CloudDocs/Documents/comparativesite/onitbuddyprod/node_modules/@civic/common-gateway-react/dist/esm/useHooks/usePOWO.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst usePowo = ({ wallet, chainImplementation }, state, dispatch) => {\n    const { powoFinished, walletPowoInProgress, refreshInProgress, ownerTransactionConfirmed } = state;\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    /**\n     * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n     * then resolve the promise\n     */\n    const waitForConfirmPOWO = (0, react_1.useCallback)(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async (payload) => {\n        logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n            payload,\n        });\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForConfirmPOWO', { powoFinished });\n            if (powoFinished) {\n                resolve(payload);\n            }\n        });\n    }, [powoFinished, expectWalletConnected]);\n    /**\n     * wait until the user has provided proof of wallet ownership using their connected wallet\n     * if this was triggered from the refresh flow, dispatch events to indicate progress\n     * if not, resolve a promise when the proof is ready\n     */\n    const waitForPOWO = (0, react_1.useCallback)(async (\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) => {\n        logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger_1.default.debug('usePowo waitForPOWO', {\n                payload,\n                publicKey: connectedWallet.publicKey,\n            });\n            return new Promise((resolve) => {\n                logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n                    walletPowoInProgress,\n                    refreshInProgress,\n                });\n                chainImplementation\n                    .proveWalletOwnership()\n                    .then((proof) => {\n                    resolve({ proof, payload });\n                    dispatch({ type: 'walletPowoComplete' });\n                    dispatch({ type: 'civicPass_check_token_status' });\n                })\n                    .catch((error) => {\n                    logger_1.default.error('Proof of wallet ownership error: ', error);\n                    dispatch({ type: 'walletPowoIncomplete' });\n                });\n            });\n        }\n        return {};\n    }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n    /**\n     * wait until the user has confirmed they want to continue the sign transaction flow\n     * then resolve the promise\n     */\n    const waitForTransactionConfirm = (0, react_1.useCallback)(async () => {\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForTransactionConfirm', { ownerTransactionConfirmed });\n            if (ownerTransactionConfirmed) {\n                resolve();\n            }\n        });\n    }, [ownerTransactionConfirmed, expectWalletConnected]);\n    /**\n     * wait for the user sign transaction callback and then dispatch awaiting owner transaction\n     * to set the correct status while waiting for the token on chain\n     */\n    const waitForHandleTransaction = (0, react_1.useCallback)(async (transaction) => {\n        logger_1.default.debug('waitForHandleTransaction', transaction);\n        try {\n            await chainImplementation.handleUserSignedTransaction(transaction);\n            dispatch({ type: 'walletPowoComplete' });\n        }\n        catch (error) {\n            const errorMessage = error && error instanceof Error ? error.message : 'ChainTransaction error';\n            const errorCode = error === null || error === void 0 ? void 0 : error.errorCode;\n            logger_1.default.error('waitForHandleTransaction error', { errorCode });\n            const payload = Object.assign({}, (errorCode ? { errorCode } : {}));\n            logger_1.default.error('waitForHandleTransaction (error instanceof ChainError)', errorCode);\n            dispatch({ type: 'civicPass_owner_sends_chainTransactionError', payload });\n            throw new types_1.ChainTransactionError(errorMessage);\n        }\n    }, [chainImplementation]);\n    return {\n        waitForConfirmPOWO,\n        waitForTransactionConfirm,\n        waitForHandleTransaction,\n        waitForPOWO,\n    };\n};\nexports.default = usePowo;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}